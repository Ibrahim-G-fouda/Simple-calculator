
calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001568  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004c  00800060  00001568  000015fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  008000ac  008000ac  00001648  2**0
                  ALLOC
  3 .stab         0000171c  00000000  00000000  00001648  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000522  00000000  00000000  00002d64  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00003288  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000140a  00000000  00000000  00003408  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000613  00000000  00000000  00004812  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b26  00000000  00000000  00004e25  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000028c  00000000  00000000  0000594c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000334  00000000  00000000  00005bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001077  00000000  00000000  00005f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00006f83  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e6       	ldi	r30, 0x68	; 104
      68:	f5 e1       	ldi	r31, 0x15	; 21
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 3a       	cpi	r26, 0xAC	; 172
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac ea       	ldi	r26, 0xAC	; 172
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 3a       	cpi	r26, 0xAD	; 173
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 49 00 	call	0x92	; 0x92 <main>
      8a:	0c 94 b2 0a 	jmp	0x1564	; 0x1564 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:

#include <avr/io.h>
#include <math.h>
#include "prog init.h"
int main(void)
{
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
      9a:	c3 57       	subi	r28, 0x73	; 115
      9c:	d0 40       	sbci	r29, 0x00	; 0
      9e:	0f b6       	in	r0, 0x3f	; 63
      a0:	f8 94       	cli
      a2:	de bf       	out	0x3e, r29	; 62
      a4:	0f be       	out	0x3f, r0	; 63
      a6:	cd bf       	out	0x3d, r28	; 61
lcd_init();
      a8:	0e 94 92 08 	call	0x1124	; 0x1124 <lcd_init>
keypad_init('c');
      ac:	83 e6       	ldi	r24, 0x63	; 99
      ae:	0e 94 8a 07 	call	0xf14	; 0xf14 <keypad_init>
 unsigned short first[16]={'0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0'};
      b2:	de 01       	movw	r26, r28
      b4:	11 96       	adiw	r26, 0x01	; 1
      b6:	eb e6       	ldi	r30, 0x6B	; 107
      b8:	f0 e0       	ldi	r31, 0x00	; 0
      ba:	80 e2       	ldi	r24, 0x20	; 32
      bc:	01 90       	ld	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	81 50       	subi	r24, 0x01	; 1
      c2:	e1 f7       	brne	.-8      	; 0xbc <main+0x2a>
int work_space[16]={'0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0'};
      c4:	de 01       	movw	r26, r28
      c6:	91 96       	adiw	r26, 0x21	; 33
      c8:	eb e6       	ldi	r30, 0x6B	; 107
      ca:	f0 e0       	ldi	r31, 0x00	; 0
      cc:	80 e2       	ldi	r24, 0x20	; 32
      ce:	01 90       	ld	r0, Z+
      d0:	0d 92       	st	X+, r0
      d2:	81 50       	subi	r24, 0x01	; 1
      d4:	e1 f7       	brne	.-8      	; 0xce <main+0x3c>
unsigned char mirror[16]={'0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0'};
      d6:	de 01       	movw	r26, r28
      d8:	af 5b       	subi	r26, 0xBF	; 191
      da:	bf 4f       	sbci	r27, 0xFF	; 255
      dc:	eb e8       	ldi	r30, 0x8B	; 139
      de:	f0 e0       	ldi	r31, 0x00	; 0
      e0:	80 e1       	ldi	r24, 0x10	; 16
      e2:	01 90       	ld	r0, Z+
      e4:	0d 92       	st	X+, r0
      e6:	81 50       	subi	r24, 0x01	; 1
      e8:	e1 f7       	brne	.-8      	; 0xe2 <main+0x50>
 //unsigned char mul_index[8]={0};
 // unsigned char sum_index[8]={0};
  unsigned char str[11];
  unsigned char char_index[8]={0};//index of characters
int digits_mum[8]={0};//number of digits in every real number
      ea:	80 e1       	ldi	r24, 0x10	; 16
      ec:	fe 01       	movw	r30, r28
      ee:	e4 5a       	subi	r30, 0xA4	; 164
      f0:	ff 4f       	sbci	r31, 0xFF	; 255
      f2:	df 01       	movw	r26, r30
      f4:	1d 92       	st	X+, r1
      f6:	8a 95       	dec	r24
      f8:	e9 f7       	brne	.-6      	; 0xf4 <main+0x62>
	  int l;// percentage
	  unsigned short big_count=0;
    while(1)
    {
  a=0;//
  b=0;//
      fa:	00 e0       	ldi	r16, 0x00	; 0
 char_count=0;//number of operators
 result=0;
last_res=0;
 res=0;
  sum=0;
  for (a=0;a<16;a++)//a used
      fc:	10 e0       	ldi	r17, 0x00	; 0
  offset=0;
 right=0;
 left=0;
 last_res=0;
num_count=0;//numbe of digits befor concat
 char_count=0;//number of operators
      fe:	ee 24       	eor	r14, r14
     100:	ff 24       	eor	r15, r15
  p=0;
  offset=0;
 right=0;
 left=0;
 last_res=0;
num_count=0;//numbe of digits befor concat
     102:	cc 24       	eor	r12, r12
     104:	dd 24       	eor	r13, r13
  /*****************************/
   /************************************************************************/
   /*      concatination stage                                                                
   /***********************************************************************/
//lcd_send_cmd(clr_screen);
 for (e=0;e<b;e++)//e used
     106:	e1 e4       	ldi	r30, 0x41	; 65
     108:	f0 e0       	ldi	r31, 0x00	; 0
     10a:	ec 0f       	add	r30, r28
     10c:	fd 1f       	adc	r31, r29
     10e:	31 96       	adiw	r30, 0x01	; 1
     110:	e2 96       	adiw	r28, 0x32	; 50
     112:	ff af       	sts	0x7f, r31
     114:	ee af       	sts	0x7e, r30
     116:	e2 97       	sbiw	r28, 0x32	; 50


#include <avr/io.h>
#include <math.h>
#include "prog init.h"
int main(void)
     118:	2c e5       	ldi	r18, 0x5C	; 92
     11a:	30 e0       	ldi	r19, 0x00	; 0
     11c:	2c 0f       	add	r18, r28
     11e:	3d 1f       	adc	r19, r29
     120:	2e 5f       	subi	r18, 0xFE	; 254
     122:	3f 4f       	sbci	r19, 0xFF	; 255
     124:	e4 96       	adiw	r28, 0x34	; 52
     126:	3f af       	sts	0x7f, r19
     128:	2e af       	sts	0x7e, r18
     12a:	e4 97       	sbiw	r28, 0x34	; 52
	 
		 case 1:
		 l=1;
		 break;
		 case 2:
		 l=10;
     12c:	0f 2e       	mov	r0, r31
     12e:	fa e0       	ldi	r31, 0x0A	; 10
     130:	8f 2e       	mov	r8, r31
     132:	99 24       	eor	r9, r9
     134:	f0 2d       	mov	r31, r0
for (j=0;j<digits_mum[e];j++)//j used 
{


sum=sum+(first[offset+j]*l);
l=l/10;
     136:	af 96       	adiw	r28, 0x2f	; 47
     138:	8f ae       	sts	0xbf, r24
     13a:	af 97       	sbiw	r28, 0x2f	; 47
     13c:	e0 96       	adiw	r28, 0x30	; 48
     13e:	9f ae       	sts	0xbf, r25
     140:	e0 97       	sbiw	r28, 0x30	; 48
     142:	69 c0       	rjmp	.+210    	; 0x216 <main+0x184>
last_res=0;
 res=0;
  sum=0;
  for (a=0;a<16;a++)//a used
  {
key_pad_recive=ret_keypad();
     144:	0e 94 39 07 	call	0xe72	; 0xe72 <ret_keypad>
     148:	28 2f       	mov	r18, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     14a:	8f ef       	ldi	r24, 0xFF	; 255
     14c:	92 e5       	ldi	r25, 0x52	; 82
     14e:	a7 e0       	ldi	r26, 0x07	; 7
     150:	81 50       	subi	r24, 0x01	; 1
     152:	90 40       	sbci	r25, 0x00	; 0
     154:	a0 40       	sbci	r26, 0x00	; 0
     156:	e1 f7       	brne	.-8      	; 0x150 <main+0xbe>
     158:	00 c0       	rjmp	.+0      	; 0x15a <main+0xc8>
     15a:	00 00       	nop
dm(300);
if((key_pad_recive=='0')||(key_pad_recive=='1')||(key_pad_recive=='2')||(key_pad_recive=='3')||(key_pad_recive=='4')||(key_pad_recive=='5')||(key_pad_recive=='6')||(key_pad_recive=='7')||(key_pad_recive=='8')||(key_pad_recive=='9'))
     15c:	82 2f       	mov	r24, r18
     15e:	80 53       	subi	r24, 0x30	; 48
     160:	8a 30       	cpi	r24, 0x0A	; 10
     162:	98 f4       	brcc	.+38     	; 0x18a <main+0xf8>
{
first[a]=(key_pad_recive-48);
     164:	81 2f       	mov	r24, r17
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	88 0f       	add	r24, r24
     16a:	99 1f       	adc	r25, r25
     16c:	e1 e0       	ldi	r30, 0x01	; 1
     16e:	f0 e0       	ldi	r31, 0x00	; 0
     170:	ec 0f       	add	r30, r28
     172:	fd 1f       	adc	r31, r29
     174:	e8 0f       	add	r30, r24
     176:	f9 1f       	adc	r31, r25
     178:	82 2f       	mov	r24, r18
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	c0 97       	sbiw	r24, 0x30	; 48
     17e:	91 83       	std	Z+1, r25	; 0x01
     180:	80 83       	st	Z, r24
num_count++;
     182:	08 94       	sec
     184:	c1 1c       	adc	r12, r1
     186:	d1 1c       	adc	r13, r1
     188:	45 c0       	rjmp	.+138    	; 0x214 <main+0x182>

}
else if ((key_pad_recive=='+')||(key_pad_recive=='-')||(key_pad_recive=='*')||(key_pad_recive=='/')||(key_pad_recive=='=')&&((a!=0)&&(a!=15)))
     18a:	2b 32       	cpi	r18, 0x2B	; 43
     18c:	71 f0       	breq	.+28     	; 0x1aa <main+0x118>
     18e:	2d 32       	cpi	r18, 0x2D	; 45
     190:	61 f0       	breq	.+24     	; 0x1aa <main+0x118>
     192:	2a 32       	cpi	r18, 0x2A	; 42
     194:	51 f0       	breq	.+20     	; 0x1aa <main+0x118>
     196:	2f 32       	cpi	r18, 0x2F	; 47
     198:	41 f0       	breq	.+16     	; 0x1aa <main+0x118>
     19a:	2d 33       	cpi	r18, 0x3D	; 61
     19c:	d9 f5       	brne	.+118    	; 0x214 <main+0x182>
     19e:	11 23       	and	r17, r17
     1a0:	21 f1       	breq	.+72     	; 0x1ea <main+0x158>
     1a2:	1f 30       	cpi	r17, 0x0F	; 15
     1a4:	09 f0       	breq	.+2      	; 0x1a8 <main+0x116>
     1a6:	fe c2       	rjmp	.+1532   	; 0x7a4 <main+0x712>
     1a8:	20 c0       	rjmp	.+64     	; 0x1ea <main+0x158>
//lcd_send_char(num_count+48);	
//for(;;);
//}

/*****************************/
first[a]=key_pad_recive;
     1aa:	81 2f       	mov	r24, r17
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	88 0f       	add	r24, r24
     1b0:	99 1f       	adc	r25, r25
     1b2:	e1 e0       	ldi	r30, 0x01	; 1
     1b4:	f0 e0       	ldi	r31, 0x00	; 0
     1b6:	ec 0f       	add	r30, r28
     1b8:	fd 1f       	adc	r31, r29
     1ba:	e8 0f       	add	r30, r24
     1bc:	f9 1f       	adc	r31, r25
     1be:	20 83       	st	Z, r18
     1c0:	11 82       	std	Z+1, r1	; 0x01
char_count++;
     1c2:	08 94       	sec
     1c4:	e1 1c       	adc	r14, r1
     1c6:	f1 1c       	adc	r15, r1

digits_mum[b]=num_count;//b used
     1c8:	80 2f       	mov	r24, r16
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	88 0f       	add	r24, r24
     1ce:	99 1f       	adc	r25, r25
     1d0:	ac e5       	ldi	r26, 0x5C	; 92
     1d2:	b0 e0       	ldi	r27, 0x00	; 0
     1d4:	ac 0f       	add	r26, r28
     1d6:	bd 1f       	adc	r27, r29
     1d8:	8a 0f       	add	r24, r26
     1da:	9b 1f       	adc	r25, r27
     1dc:	fc 01       	movw	r30, r24
     1de:	d1 82       	std	Z+1, r13	; 0x01
     1e0:	c0 82       	st	Z, r12
b++;
     1e2:	0f 5f       	subi	r16, 0xFF	; 255
num_count=0;
     1e4:	cc 24       	eor	r12, r12
     1e6:	dd 24       	eor	r13, r13
     1e8:	15 c0       	rjmp	.+42     	; 0x214 <main+0x182>
if ((key_pad_recive=='='))
{
break;
}
}
else if((key_pad_recive=='+')||(key_pad_recive=='-')||(key_pad_recive=='*')||(key_pad_recive=='/')||(key_pad_recive=='=')&&((a==0)||(a==15)))
     1ea:	11 23       	and	r17, r17
     1ec:	11 f0       	breq	.+4      	; 0x1f2 <main+0x160>
     1ee:	1f 30       	cpi	r17, 0x0F	; 15
     1f0:	89 f4       	brne	.+34     	; 0x214 <main+0x182>
 {
	 lcd_send_cmd(clr_screen);
     1f2:	81 e0       	ldi	r24, 0x01	; 1
     1f4:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <lcd_send_cmd>
	 lcd_send_string("math error");
     1f8:	80 e6       	ldi	r24, 0x60	; 96
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	0e 94 05 09 	call	0x120a	; 0x120a <lcd_send_string>
     200:	8f ef       	ldi	r24, 0xFF	; 255
     202:	9d e3       	ldi	r25, 0x3D	; 61
     204:	a9 e4       	ldi	r26, 0x49	; 73
     206:	81 50       	subi	r24, 0x01	; 1
     208:	90 40       	sbci	r25, 0x00	; 0
     20a:	a0 40       	sbci	r26, 0x00	; 0
     20c:	e1 f7       	brne	.-8      	; 0x206 <main+0x174>
     20e:	00 c0       	rjmp	.+0      	; 0x210 <main+0x17e>
     210:	00 00       	nop
     212:	04 c0       	rjmp	.+8      	; 0x21c <main+0x18a>
 char_count=0;//number of operators
 result=0;
last_res=0;
 res=0;
  sum=0;
  for (a=0;a<16;a++)//a used
     214:	1f 5f       	subi	r17, 0xFF	; 255
     216:	10 31       	cpi	r17, 0x10	; 16
     218:	08 f4       	brcc	.+2      	; 0x21c <main+0x18a>
     21a:	94 cf       	rjmp	.-216    	; 0x144 <main+0xb2>
	// m++;
	
 //}
  //for(;;);
  /*****************************/ 
  big_count=b+char_count;
     21c:	d7 01       	movw	r26, r14
     21e:	a0 0f       	add	r26, r16
     220:	b1 1d       	adc	r27, r1
     222:	ae 96       	adiw	r28, 0x2e	; 46
     224:	bf af       	sts	0x7f, r27
     226:	ae af       	sts	0x7e, r26
     228:	ae 97       	sbiw	r28, 0x2e	; 46
  /*****************************/
   /************************************************************************/
   /*      concatination stage                                                                
   /***********************************************************************/
//lcd_send_cmd(clr_screen);
 for (e=0;e<b;e++)//e used
     22a:	00 23       	and	r16, r16
     22c:	09 f4       	brne	.+2      	; 0x230 <main+0x19e>
     22e:	d6 c0       	rjmp	.+428    	; 0x3dc <main+0x34a>
     230:	0f 2e       	mov	r0, r31
     232:	fc e5       	ldi	r31, 0x5C	; 92
     234:	4f 2e       	mov	r4, r31
     236:	55 24       	eor	r5, r5
     238:	f0 2d       	mov	r31, r0
     23a:	4c 0e       	add	r4, r28
     23c:	5d 1e       	adc	r5, r29
     23e:	0f 2e       	mov	r0, r31
     240:	f1 e2       	ldi	r31, 0x21	; 33
     242:	af 2e       	mov	r10, r31
     244:	bb 24       	eor	r11, r11
     246:	f0 2d       	mov	r31, r0
     248:	ac 0e       	add	r10, r28
     24a:	bd 1e       	adc	r11, r29
     24c:	e2 96       	adiw	r28, 0x32	; 50
     24e:	6e ac       	sts	0xae, r22
     250:	7f ac       	sts	0xaf, r23
     252:	e2 97       	sbiw	r28, 0x32	; 50


#include <avr/io.h>
#include <math.h>
#include "prog init.h"
int main(void)
     254:	01 50       	subi	r16, 0x01	; 1
     256:	80 2f       	mov	r24, r16
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	88 0f       	add	r24, r24
     25c:	99 1f       	adc	r25, r25
     25e:	e4 96       	adiw	r28, 0x34	; 52
     260:	2e ac       	sts	0xae, r18
     262:	3f ac       	sts	0xaf, r19
     264:	e4 97       	sbiw	r28, 0x34	; 52
     266:	28 0e       	add	r2, r24
     268:	39 1e       	adc	r3, r25
  j=0;//
  h=0;
  i=0;
  g=0;
  k=0;//
  l=0;
     26a:	60 e0       	ldi	r22, 0x00	; 0
     26c:	70 e0       	ldi	r23, 0x00	; 0
  n=0;//
  o=0;
  p=0;
  offset=0;
     26e:	dd 24       	eor	r13, r13
num_count=0;//numbe of digits befor concat
 char_count=0;//number of operators
 result=0;
last_res=0;
 res=0;
  sum=0;
     270:	00 e0       	ldi	r16, 0x00	; 0
     272:	10 e0       	ldi	r17, 0x00	; 0
}
}
else
{
	sum=0;//the bigest pain!!
	for (j=1;j<=digits_mum[e];j++)
     274:	cc 24       	eor	r12, r12
     276:	c3 94       	inc	r12
   /*      concatination stage                                                                
   /***********************************************************************/
//lcd_send_cmd(clr_screen);
 for (e=0;e<b;e++)//e used
 {
 switch(digits_mum[e])
     278:	d2 01       	movw	r26, r4
     27a:	ed 91       	ld	r30, X+
     27c:	fd 91       	ld	r31, X+
     27e:	2d 01       	movw	r4, r26
     280:	e3 30       	cpi	r30, 0x03	; 3
     282:	f1 05       	cpc	r31, r1
     284:	d9 f0       	breq	.+54     	; 0x2bc <main+0x22a>
     286:	e4 30       	cpi	r30, 0x04	; 4
     288:	f1 05       	cpc	r31, r1
     28a:	3c f4       	brge	.+14     	; 0x29a <main+0x208>
     28c:	e1 30       	cpi	r30, 0x01	; 1
     28e:	f1 05       	cpc	r31, r1
     290:	09 f1       	breq	.+66     	; 0x2d4 <main+0x242>
     292:	e2 30       	cpi	r30, 0x02	; 2
     294:	f1 05       	cpc	r31, r1
     296:	01 f5       	brne	.+64     	; 0x2d8 <main+0x246>
     298:	0a c0       	rjmp	.+20     	; 0x2ae <main+0x21c>
     29a:	e5 30       	cpi	r30, 0x05	; 5
     29c:	f1 05       	cpc	r31, r1
     29e:	a1 f0       	breq	.+40     	; 0x2c8 <main+0x236>
     2a0:	e5 30       	cpi	r30, 0x05	; 5
     2a2:	f1 05       	cpc	r31, r1
     2a4:	74 f0       	brlt	.+28     	; 0x2c2 <main+0x230>
     2a6:	e6 30       	cpi	r30, 0x06	; 6
     2a8:	f1 05       	cpc	r31, r1
     2aa:	b1 f4       	brne	.+44     	; 0x2d8 <main+0x246>
     2ac:	10 c0       	rjmp	.+32     	; 0x2ce <main+0x23c>
	 
		 case 1:
		 l=1;
		 break;
		 case 2:
		 l=10;
     2ae:	af 96       	adiw	r28, 0x2f	; 47
     2b0:	6f ad       	sts	0x6f, r22
     2b2:	af 97       	sbiw	r28, 0x2f	; 47
     2b4:	e0 96       	adiw	r28, 0x30	; 48
     2b6:	7f ad       	sts	0x6f, r23
     2b8:	e0 97       	sbiw	r28, 0x30	; 48
		 break;
     2ba:	0e c0       	rjmp	.+28     	; 0x2d8 <main+0x246>
		 case 3:
		 l=100;
     2bc:	64 e6       	ldi	r22, 0x64	; 100
     2be:	70 e0       	ldi	r23, 0x00	; 0
		 break;
     2c0:	0b c0       	rjmp	.+22     	; 0x2d8 <main+0x246>
		 case 4:
		 l=1000;
     2c2:	68 ee       	ldi	r22, 0xE8	; 232
     2c4:	73 e0       	ldi	r23, 0x03	; 3
		 break;
     2c6:	08 c0       	rjmp	.+16     	; 0x2d8 <main+0x246>
		 case 5:
		 l=10000;
     2c8:	60 e1       	ldi	r22, 0x10	; 16
     2ca:	77 e2       	ldi	r23, 0x27	; 39
		 break;
     2cc:	05 c0       	rjmp	.+10     	; 0x2d8 <main+0x246>
		 case 6:
		 l=100000;
     2ce:	60 ea       	ldi	r22, 0xA0	; 160
     2d0:	76 e8       	ldi	r23, 0x86	; 134
		 break;
     2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <main+0x246>
 {
 switch(digits_mum[e])
 {
	 
		 case 1:
		 l=1;
     2d4:	61 e0       	ldi	r22, 0x01	; 1
     2d6:	70 e0       	ldi	r23, 0x00	; 0
		 break;
	


 }
if (offset==0)
     2d8:	dd 20       	and	r13, r13
     2da:	39 f0       	breq	.+14     	; 0x2ea <main+0x258>
}
}
else
{
	sum=0;//the bigest pain!!
	for (j=1;j<=digits_mum[e];j++)
     2dc:	1e 16       	cp	r1, r30
     2de:	1f 06       	cpc	r1, r31
     2e0:	5c f1       	brlt	.+86     	; 0x338 <main+0x2a6>
     2e2:	4c 2d       	mov	r20, r12
     2e4:	00 e0       	ldi	r16, 0x00	; 0
     2e6:	10 e0       	ldi	r17, 0x00	; 0
     2e8:	51 c0       	rjmp	.+162    	; 0x38c <main+0x2fa>


 }
if (offset==0)
{
for (j=0;j<digits_mum[e];j++)//j used 
     2ea:	1e 16       	cp	r1, r30
     2ec:	1f 06       	cpc	r1, r31
     2ee:	0c f0       	brlt	.+2      	; 0x2f2 <main+0x260>
     2f0:	4c c0       	rjmp	.+152    	; 0x38a <main+0x2f8>
     2f2:	80 e0       	ldi	r24, 0x00	; 0
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	40 e0       	ldi	r20, 0x00	; 0
{


sum=sum+(first[offset+j]*l);
     2f8:	88 0f       	add	r24, r24
     2fa:	99 1f       	adc	r25, r25
     2fc:	21 e0       	ldi	r18, 0x01	; 1
     2fe:	30 e0       	ldi	r19, 0x00	; 0
     300:	2c 0f       	add	r18, r28
     302:	3d 1f       	adc	r19, r29
     304:	82 0f       	add	r24, r18
     306:	93 1f       	adc	r25, r19
     308:	dc 01       	movw	r26, r24
     30a:	8d 91       	ld	r24, X+
     30c:	9c 91       	ld	r25, X
     30e:	11 97       	sbiw	r26, 0x01	; 1
     310:	68 9f       	mul	r22, r24
     312:	90 01       	movw	r18, r0
     314:	69 9f       	mul	r22, r25
     316:	30 0d       	add	r19, r0
     318:	78 9f       	mul	r23, r24
     31a:	30 0d       	add	r19, r0
     31c:	11 24       	eor	r1, r1
     31e:	02 0f       	add	r16, r18
     320:	13 1f       	adc	r17, r19
l=l/10;
     322:	cb 01       	movw	r24, r22
     324:	b4 01       	movw	r22, r8
     326:	0e 94 8b 0a 	call	0x1516	; 0x1516 <__divmodhi4>


 }
if (offset==0)
{
for (j=0;j<digits_mum[e];j++)//j used 
     32a:	4f 5f       	subi	r20, 0xFF	; 255
     32c:	84 2f       	mov	r24, r20
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	8e 17       	cp	r24, r30
     332:	9f 07       	cpc	r25, r31
     334:	0c f3       	brlt	.-62     	; 0x2f8 <main+0x266>
     336:	2a c0       	rjmp	.+84     	; 0x38c <main+0x2fa>
}
}
else
{
	sum=0;//the bigest pain!!
	for (j=1;j<=digits_mum[e];j++)
     338:	81 e0       	ldi	r24, 0x01	; 1
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	4c 2d       	mov	r20, r12
     33e:	00 e0       	ldi	r16, 0x00	; 0
     340:	10 e0       	ldi	r17, 0x00	; 0
	{
	
	sum=sum+(first[offset+j]*l);
     342:	ed 2c       	mov	r14, r13
     344:	ff 24       	eor	r15, r15
     346:	8e 0d       	add	r24, r14
     348:	9f 1d       	adc	r25, r15
     34a:	88 0f       	add	r24, r24
     34c:	99 1f       	adc	r25, r25
     34e:	21 e0       	ldi	r18, 0x01	; 1
     350:	30 e0       	ldi	r19, 0x00	; 0
     352:	2c 0f       	add	r18, r28
     354:	3d 1f       	adc	r19, r29
     356:	82 0f       	add	r24, r18
     358:	93 1f       	adc	r25, r19
     35a:	dc 01       	movw	r26, r24
     35c:	8d 91       	ld	r24, X+
     35e:	9c 91       	ld	r25, X
     360:	11 97       	sbiw	r26, 0x01	; 1
     362:	68 9f       	mul	r22, r24
     364:	90 01       	movw	r18, r0
     366:	69 9f       	mul	r22, r25
     368:	30 0d       	add	r19, r0
     36a:	78 9f       	mul	r23, r24
     36c:	30 0d       	add	r19, r0
     36e:	11 24       	eor	r1, r1
     370:	02 0f       	add	r16, r18
     372:	13 1f       	adc	r17, r19
	l=l/10;
     374:	cb 01       	movw	r24, r22
     376:	b4 01       	movw	r22, r8
     378:	0e 94 8b 0a 	call	0x1516	; 0x1516 <__divmodhi4>
}
}
else
{
	sum=0;//the bigest pain!!
	for (j=1;j<=digits_mum[e];j++)
     37c:	4f 5f       	subi	r20, 0xFF	; 255
     37e:	84 2f       	mov	r24, r20
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	e8 17       	cp	r30, r24
     384:	f9 07       	cpc	r31, r25
     386:	fc f6       	brge	.-66     	; 0x346 <main+0x2b4>
     388:	01 c0       	rjmp	.+2      	; 0x38c <main+0x2fa>


 }
if (offset==0)
{
for (j=0;j<digits_mum[e];j++)//j used 
     38a:	40 e0       	ldi	r20, 0x00	; 0
//lcd_send_char((sum/10)%10+48);
//lcd_send_char((sum%10)+48);

 //lcd_send_char(offset+48);
 // lcd_send_char('D');
 offset=offset+j;
     38c:	d4 0e       	add	r13, r20
 work_space[h]=sum;
     38e:	f5 01       	movw	r30, r10
     390:	11 83       	std	Z+1, r17	; 0x01
     392:	00 83       	st	Z, r16


#include <avr/io.h>
#include <math.h>
#include "prog init.h"
int main(void)
     394:	f3 01       	movw	r30, r6
     396:	31 97       	sbiw	r30, 0x01	; 1

 //lcd_send_char(offset+48);
 // lcd_send_char('D');
 offset=offset+j;
 work_space[h]=sum;
 mirror[h]=1;//h used
     398:	c0 82       	st	Z, r12
 h++;
 work_space[h]=first[offset];
     39a:	ed 2d       	mov	r30, r13
     39c:	f0 e0       	ldi	r31, 0x00	; 0
     39e:	ee 0f       	add	r30, r30
     3a0:	ff 1f       	adc	r31, r31
     3a2:	21 e0       	ldi	r18, 0x01	; 1
     3a4:	30 e0       	ldi	r19, 0x00	; 0
     3a6:	2c 0f       	add	r18, r28
     3a8:	3d 1f       	adc	r19, r29
     3aa:	e2 0f       	add	r30, r18
     3ac:	f3 1f       	adc	r31, r19
     3ae:	80 81       	ld	r24, Z
     3b0:	91 81       	ldd	r25, Z+1	; 0x01
     3b2:	d5 01       	movw	r26, r10
     3b4:	12 96       	adiw	r26, 0x02	; 2
     3b6:	8c 93       	st	X, r24
     3b8:	12 97       	sbiw	r26, 0x02	; 2
     3ba:	13 96       	adiw	r26, 0x03	; 3
     3bc:	9c 93       	st	X, r25
     3be:	13 97       	sbiw	r26, 0x03	; 3
 mirror[h]=first[offset];
     3c0:	f3 01       	movw	r30, r6
     3c2:	80 83       	st	Z, r24
     3c4:	24 e0       	ldi	r18, 0x04	; 4
     3c6:	30 e0       	ldi	r19, 0x00	; 0
     3c8:	a2 0e       	add	r10, r18
     3ca:	b3 1e       	adc	r11, r19
     3cc:	82 e0       	ldi	r24, 0x02	; 2
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	68 0e       	add	r6, r24
     3d2:	79 1e       	adc	r7, r25
  /*****************************/
   /************************************************************************/
   /*      concatination stage                                                                
   /***********************************************************************/
//lcd_send_cmd(clr_screen);
 for (e=0;e<b;e++)//e used
     3d4:	42 14       	cp	r4, r2
     3d6:	53 04       	cpc	r5, r3
     3d8:	09 f0       	breq	.+2      	; 0x3dc <main+0x34a>
     3da:	4e cf       	rjmp	.-356    	; 0x278 <main+0x1e6>
 /*****************************/

/************************************************************************/
/* last stage                                                                      */
/************************************************************************/
 for(g=0;g<big_count-1;g++)//g used
     3dc:	ae 96       	adiw	r28, 0x2e	; 46
     3de:	ae ac       	sts	0xae, r26
     3e0:	bf ac       	sts	0xaf, r27
     3e2:	ae 97       	sbiw	r28, 0x2e	; 46
     3e4:	08 94       	sec
     3e6:	a1 08       	sbc	r10, r1
     3e8:	b1 08       	sbc	r11, r1
     3ea:	a1 14       	cp	r10, r1
     3ec:	b1 04       	cpc	r11, r1
     3ee:	09 f4       	brne	.+2      	; 0x3f2 <main+0x360>
     3f0:	dd c0       	rjmp	.+442    	; 0x5ac <main+0x51a>
     3f2:	0f ef       	ldi	r16, 0xFF	; 255
     3f4:	11 e0       	ldi	r17, 0x01	; 1
     3f6:	20 e0       	ldi	r18, 0x00	; 0
     3f8:	30 e0       	ldi	r19, 0x00	; 0
     3fa:	44 24       	eor	r4, r4
     3fc:	55 24       	eor	r5, r5
     3fe:	32 01       	movw	r6, r4
 {
	 if ((mirror[g]=='/')||(mirror[g]=='*'))
     400:	41 2f       	mov	r20, r17
     402:	41 50       	subi	r20, 0x01	; 1
     404:	50 e0       	ldi	r21, 0x00	; 0
     406:	e1 e4       	ldi	r30, 0x41	; 65
     408:	f0 e0       	ldi	r31, 0x00	; 0
     40a:	ec 0f       	add	r30, r28
     40c:	fd 1f       	adc	r31, r29
     40e:	e4 0f       	add	r30, r20
     410:	f5 1f       	adc	r31, r21
     412:	80 81       	ld	r24, Z
     414:	8f 32       	cpi	r24, 0x2F	; 47
     416:	09 f4       	brne	.+2      	; 0x41a <main+0x388>
     418:	5c c0       	rjmp	.+184    	; 0x4d2 <main+0x440>
     41a:	8a 32       	cpi	r24, 0x2A	; 42
     41c:	09 f0       	breq	.+2      	; 0x420 <main+0x38e>
     41e:	bd c0       	rjmp	.+378    	; 0x59a <main+0x508>
	 {
	if ((mirror[g]=='*'))
	{
	k=g;//k used
	while(k<=big_count)
     420:	ae 96       	adiw	r28, 0x2e	; 46
     422:	ae ad       	sts	0x6e, r26
     424:	bf ad       	sts	0x6f, r27
     426:	ae 97       	sbiw	r28, 0x2e	; 46
     428:	a2 17       	cp	r26, r18
     42a:	b3 07       	cpc	r27, r19
     42c:	f0 f0       	brcs	.+60     	; 0x46a <main+0x3d8>
	{
		k++;
		if (mirror[k]==1);
		{
		right=work_space[k];
     42e:	21 2f       	mov	r18, r17
     430:	30 e0       	ldi	r19, 0x00	; 0
     432:	c9 01       	movw	r24, r18
     434:	88 0f       	add	r24, r24
     436:	99 1f       	adc	r25, r25
     438:	e1 e0       	ldi	r30, 0x01	; 1
     43a:	f0 e0       	ldi	r31, 0x00	; 0
     43c:	ec 0f       	add	r30, r28
     43e:	fd 1f       	adc	r31, r29
     440:	e8 0f       	add	r30, r24
     442:	f9 1f       	adc	r31, r25
     444:	80 a1       	lds	r24, 0x40
     446:	91 a1       	lds	r25, 0x41
     448:	2c 01       	movw	r4, r24
     44a:	66 24       	eor	r6, r6
     44c:	57 fc       	sbrc	r5, 7
     44e:	60 94       	com	r6
     450:	76 2c       	mov	r7, r6
		work_space[k]='0';
     452:	80 e3       	ldi	r24, 0x30	; 48
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	91 a3       	lds	r25, 0x51
     458:	80 a3       	lds	r24, 0x50
		mirror[k]='0';
     45a:	e1 e4       	ldi	r30, 0x41	; 65
     45c:	f0 e0       	ldi	r31, 0x00	; 0
     45e:	ec 0f       	add	r30, r28
     460:	fd 1f       	adc	r31, r29
     462:	e2 0f       	add	r30, r18
     464:	f3 1f       	adc	r31, r19
     466:	90 e3       	ldi	r25, 0x30	; 48
     468:	90 83       	st	Z, r25
	while(k>=0)
	{
		k--;
		if (mirror[k]==1);
		{
			left=work_space[k];
     46a:	20 2f       	mov	r18, r16
     46c:	30 e0       	ldi	r19, 0x00	; 0
     46e:	c9 01       	movw	r24, r18
     470:	88 0f       	add	r24, r24
     472:	99 1f       	adc	r25, r25
     474:	e1 e0       	ldi	r30, 0x01	; 1
     476:	f0 e0       	ldi	r31, 0x00	; 0
     478:	ec 0f       	add	r30, r28
     47a:	fd 1f       	adc	r31, r29
     47c:	e8 0f       	add	r30, r24
     47e:	f9 1f       	adc	r31, r25
     480:	80 a1       	lds	r24, 0x40
     482:	91 a1       	lds	r25, 0x41
     484:	6c 01       	movw	r12, r24
     486:	ee 24       	eor	r14, r14
     488:	d7 fc       	sbrc	r13, 7
     48a:	e0 94       	com	r14
     48c:	fe 2c       	mov	r15, r14
			work_space[k]='0';
     48e:	a0 e3       	ldi	r26, 0x30	; 48
     490:	b0 e0       	ldi	r27, 0x00	; 0
     492:	b1 a3       	lds	r27, 0x51
     494:	a0 a3       	lds	r26, 0x50
			mirror[k]='0';
     496:	e1 e4       	ldi	r30, 0x41	; 65
     498:	f0 e0       	ldi	r31, 0x00	; 0
     49a:	ec 0f       	add	r30, r28
     49c:	fd 1f       	adc	r31, r29
     49e:	e2 0f       	add	r30, r18
     4a0:	f3 1f       	adc	r31, r19
     4a2:	b0 e3       	ldi	r27, 0x30	; 48
     4a4:	b0 83       	st	Z, r27
			break;
		}
		
	}
result=left*right;
work_space[g]=result;
     4a6:	ca 01       	movw	r24, r20
     4a8:	88 0f       	add	r24, r24
     4aa:	99 1f       	adc	r25, r25
     4ac:	22 24       	eor	r2, r2
     4ae:	33 24       	eor	r3, r3
     4b0:	23 94       	inc	r2
     4b2:	2c 0e       	add	r2, r28
     4b4:	3d 1e       	adc	r3, r29
     4b6:	28 0e       	add	r2, r24
     4b8:	39 1e       	adc	r3, r25
			mirror[k]='0';
			break;
		}
		
	}
result=left*right;
     4ba:	c7 01       	movw	r24, r14
     4bc:	b6 01       	movw	r22, r12
     4be:	a3 01       	movw	r20, r6
     4c0:	92 01       	movw	r18, r4
     4c2:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <__mulsi3>
     4c6:	dc 01       	movw	r26, r24
     4c8:	cb 01       	movw	r24, r22
work_space[g]=result;
     4ca:	f1 01       	movw	r30, r2
     4cc:	91 a3       	lds	r25, 0x51
     4ce:	80 a3       	lds	r24, 0x50
     4d0:	64 c0       	rjmp	.+200    	; 0x59a <main+0x508>
	
	}
	else if ((mirror[g]=='/'))
	{
	k=g;//k used
	while(k<=big_count)
     4d2:	ae 96       	adiw	r28, 0x2e	; 46
     4d4:	8e ad       	sts	0x6e, r24
     4d6:	9f ad       	sts	0x6f, r25
     4d8:	ae 97       	sbiw	r28, 0x2e	; 46
     4da:	82 17       	cp	r24, r18
     4dc:	93 07       	cpc	r25, r19
     4de:	f0 f0       	brcs	.+60     	; 0x51c <main+0x48a>
	{
		k++;
		if (mirror[k]==1);
		{
			right=work_space[k];
     4e0:	21 2f       	mov	r18, r17
     4e2:	30 e0       	ldi	r19, 0x00	; 0
     4e4:	c9 01       	movw	r24, r18
     4e6:	88 0f       	add	r24, r24
     4e8:	99 1f       	adc	r25, r25
     4ea:	e1 e0       	ldi	r30, 0x01	; 1
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	ec 0f       	add	r30, r28
     4f0:	fd 1f       	adc	r31, r29
     4f2:	e8 0f       	add	r30, r24
     4f4:	f9 1f       	adc	r31, r25
     4f6:	80 a1       	lds	r24, 0x40
     4f8:	91 a1       	lds	r25, 0x41
     4fa:	2c 01       	movw	r4, r24
     4fc:	66 24       	eor	r6, r6
     4fe:	57 fc       	sbrc	r5, 7
     500:	60 94       	com	r6
     502:	76 2c       	mov	r7, r6
			work_space[k]='0';
     504:	a0 e3       	ldi	r26, 0x30	; 48
     506:	b0 e0       	ldi	r27, 0x00	; 0
     508:	b1 a3       	lds	r27, 0x51
     50a:	a0 a3       	lds	r26, 0x50
			mirror[k]='0';
     50c:	e1 e4       	ldi	r30, 0x41	; 65
     50e:	f0 e0       	ldi	r31, 0x00	; 0
     510:	ec 0f       	add	r30, r28
     512:	fd 1f       	adc	r31, r29
     514:	e2 0f       	add	r30, r18
     516:	f3 1f       	adc	r31, r19
     518:	b0 e3       	ldi	r27, 0x30	; 48
     51a:	b0 83       	st	Z, r27
	while(k>=0)
	{
		k--;
		if (mirror[k]==1);
		{
			left=work_space[k];
     51c:	20 2f       	mov	r18, r16
     51e:	30 e0       	ldi	r19, 0x00	; 0
     520:	c9 01       	movw	r24, r18
     522:	88 0f       	add	r24, r24
     524:	99 1f       	adc	r25, r25
     526:	e1 e0       	ldi	r30, 0x01	; 1
     528:	f0 e0       	ldi	r31, 0x00	; 0
     52a:	ec 0f       	add	r30, r28
     52c:	fd 1f       	adc	r31, r29
     52e:	e8 0f       	add	r30, r24
     530:	f9 1f       	adc	r31, r25
     532:	80 a1       	lds	r24, 0x40
     534:	91 a1       	lds	r25, 0x41
     536:	6c 01       	movw	r12, r24
     538:	ee 24       	eor	r14, r14
     53a:	d7 fc       	sbrc	r13, 7
     53c:	e0 94       	com	r14
     53e:	fe 2c       	mov	r15, r14
			work_space[k]='0';
     540:	80 e3       	ldi	r24, 0x30	; 48
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	91 a3       	lds	r25, 0x51
     546:	80 a3       	lds	r24, 0x50
			mirror[k]='0';
     548:	e1 e4       	ldi	r30, 0x41	; 65
     54a:	f0 e0       	ldi	r31, 0x00	; 0
     54c:	ec 0f       	add	r30, r28
     54e:	fd 1f       	adc	r31, r29
     550:	e2 0f       	add	r30, r18
     552:	f3 1f       	adc	r31, r19
     554:	90 e3       	ldi	r25, 0x30	; 48
     556:	90 83       	st	Z, r25
			break;
		}
		
	}
	res=(double)left/right;
	work_space[g]=res;
     558:	ca 01       	movw	r24, r20
     55a:	88 0f       	add	r24, r24
     55c:	99 1f       	adc	r25, r25
     55e:	22 24       	eor	r2, r2
     560:	33 24       	eor	r3, r3
     562:	23 94       	inc	r2
     564:	2c 0e       	add	r2, r28
     566:	3d 1e       	adc	r3, r29
     568:	28 0e       	add	r2, r24
     56a:	39 1e       	adc	r3, r25
			mirror[k]='0';
			break;
		}
		
	}
	res=(double)left/right;
     56c:	c7 01       	movw	r24, r14
     56e:	b6 01       	movw	r22, r12
     570:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <__floatsisf>
     574:	6b 01       	movw	r12, r22
     576:	7c 01       	movw	r14, r24
     578:	c3 01       	movw	r24, r6
     57a:	b2 01       	movw	r22, r4
     57c:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <__floatsisf>
     580:	9b 01       	movw	r18, r22
     582:	ac 01       	movw	r20, r24
     584:	c7 01       	movw	r24, r14
     586:	b6 01       	movw	r22, r12
     588:	0e 94 45 09 	call	0x128a	; 0x128a <__divsf3>
	work_space[g]=res;
     58c:	0e 94 ad 09 	call	0x135a	; 0x135a <__fixsfsi>
     590:	dc 01       	movw	r26, r24
     592:	cb 01       	movw	r24, r22
     594:	f1 01       	movw	r30, r2
     596:	91 a3       	lds	r25, 0x51
     598:	80 a3       	lds	r24, 0x50
 /*****************************/

/************************************************************************/
/* last stage                                                                      */
/************************************************************************/
 for(g=0;g<big_count-1;g++)//g used
     59a:	21 2f       	mov	r18, r17
     59c:	30 e0       	ldi	r19, 0x00	; 0
     59e:	1f 5f       	subi	r17, 0xFF	; 255
     5a0:	0f 5f       	subi	r16, 0xFF	; 255
     5a2:	2a 15       	cp	r18, r10
     5a4:	3b 05       	cpc	r19, r11
     5a6:	08 f4       	brcc	.+2      	; 0x5aa <main+0x518>
     5a8:	2b cf       	rjmp	.-426    	; 0x400 <main+0x36e>
     5aa:	03 c0       	rjmp	.+6      	; 0x5b2 <main+0x520>
     5ac:	44 24       	eor	r4, r4
     5ae:	55 24       	eor	r5, r5
     5b0:	32 01       	movw	r6, r4

 }// big for
 /************************************************************************/
 /* sum for                                                                     */
 /************************************************************************/
  for(g=0;g<big_count;g++)//g used
     5b2:	ae 96       	adiw	r28, 0x2e	; 46
     5b4:	2e ad       	sts	0x6e, r18
     5b6:	3f ad       	sts	0x6f, r19
     5b8:	ae 97       	sbiw	r28, 0x2e	; 46
     5ba:	21 15       	cp	r18, r1
     5bc:	31 05       	cpc	r19, r1
     5be:	09 f4       	brne	.+2      	; 0x5c2 <main+0x530>
     5c0:	be c0       	rjmp	.+380    	; 0x73e <main+0x6ac>
     5c2:	5f ef       	ldi	r21, 0xFF	; 255
     5c4:	41 e0       	ldi	r20, 0x01	; 1
     5c6:	20 e0       	ldi	r18, 0x00	; 0
     5c8:	30 e0       	ldi	r19, 0x00	; 0
			  {
				  k--;
				  if (mirror[k]==1);
				  {
					  left=work_space[k];
					  work_space[k]='0';
     5ca:	0f 2e       	mov	r0, r31
     5cc:	f0 e3       	ldi	r31, 0x30	; 48
     5ce:	cf 2e       	mov	r12, r31
     5d0:	dd 24       	eor	r13, r13
     5d2:	f0 2d       	mov	r31, r0
					  mirror[k]='0';
     5d4:	0f 2e       	mov	r0, r31
     5d6:	f0 e3       	ldi	r31, 0x30	; 48
     5d8:	ef 2e       	mov	r14, r31
     5da:	f0 2d       	mov	r31, r0
     5dc:	ae 96       	adiw	r28, 0x2e	; 46
     5de:	ae ac       	sts	0xae, r26
     5e0:	bf ac       	sts	0xaf, r27
     5e2:	ae 97       	sbiw	r28, 0x2e	; 46
 /************************************************************************/
 /* sum for                                                                     */
 /************************************************************************/
  for(g=0;g<big_count;g++)//g used
  {
	  if ((mirror[g]=='-')||(mirror[g]=='+'))
     5e4:	64 2f       	mov	r22, r20
     5e6:	61 50       	subi	r22, 0x01	; 1
     5e8:	70 e0       	ldi	r23, 0x00	; 0
     5ea:	e1 e4       	ldi	r30, 0x41	; 65
     5ec:	f0 e0       	ldi	r31, 0x00	; 0
     5ee:	ec 0f       	add	r30, r28
     5f0:	fd 1f       	adc	r31, r29
     5f2:	e6 0f       	add	r30, r22
     5f4:	f7 1f       	adc	r31, r23
     5f6:	80 81       	ld	r24, Z
     5f8:	8d 32       	cpi	r24, 0x2D	; 45
     5fa:	09 f4       	brne	.+2      	; 0x5fe <main+0x56c>
     5fc:	4e c0       	rjmp	.+156    	; 0x69a <main+0x608>
     5fe:	8b 32       	cpi	r24, 0x2B	; 43
     600:	09 f0       	breq	.+2      	; 0x604 <main+0x572>
     602:	95 c0       	rjmp	.+298    	; 0x72e <main+0x69c>
	  {
		  if ((mirror[g]=='+'))
		  {
			  k=g;//k used
			  while(k<=big_count)
     604:	a2 16       	cp	r10, r18
     606:	b3 06       	cpc	r11, r19
     608:	d8 f0       	brcs	.+54     	; 0x640 <main+0x5ae>
			  {
				  k++;
				  if (mirror[k]==1);
				  {
					  right=work_space[k];
     60a:	24 2f       	mov	r18, r20
     60c:	30 e0       	ldi	r19, 0x00	; 0
     60e:	c9 01       	movw	r24, r18
     610:	88 0f       	add	r24, r24
     612:	99 1f       	adc	r25, r25
     614:	e1 e0       	ldi	r30, 0x01	; 1
     616:	f0 e0       	ldi	r31, 0x00	; 0
     618:	ec 0f       	add	r30, r28
     61a:	fd 1f       	adc	r31, r29
     61c:	e8 0f       	add	r30, r24
     61e:	f9 1f       	adc	r31, r25
     620:	80 a1       	lds	r24, 0x40
     622:	91 a1       	lds	r25, 0x41
     624:	2c 01       	movw	r4, r24
     626:	66 24       	eor	r6, r6
     628:	57 fc       	sbrc	r5, 7
     62a:	60 94       	com	r6
     62c:	76 2c       	mov	r7, r6
					  work_space[k]='0';
     62e:	d1 a2       	lds	r29, 0x91
     630:	c0 a2       	lds	r28, 0x90
					  mirror[k]='0';
     632:	e1 e4       	ldi	r30, 0x41	; 65
     634:	f0 e0       	ldi	r31, 0x00	; 0
     636:	ec 0f       	add	r30, r28
     638:	fd 1f       	adc	r31, r29
     63a:	e2 0f       	add	r30, r18
     63c:	f3 1f       	adc	r31, r19
     63e:	e0 82       	st	Z, r14
			  while(k>=0)
			  {
				  k--;
				  if (mirror[k]==1);
				  {
					  left=work_space[k];
     640:	a5 2f       	mov	r26, r21
     642:	b0 e0       	ldi	r27, 0x00	; 0
     644:	cd 01       	movw	r24, r26
     646:	88 0f       	add	r24, r24
     648:	99 1f       	adc	r25, r25
     64a:	e1 e0       	ldi	r30, 0x01	; 1
     64c:	f0 e0       	ldi	r31, 0x00	; 0
     64e:	ec 0f       	add	r30, r28
     650:	fd 1f       	adc	r31, r29
     652:	e8 0f       	add	r30, r24
     654:	f9 1f       	adc	r31, r25
     656:	80 a1       	lds	r24, 0x40
     658:	91 a1       	lds	r25, 0x41
     65a:	8c 01       	movw	r16, r24
     65c:	22 27       	eor	r18, r18
     65e:	17 fd       	sbrc	r17, 7
     660:	20 95       	com	r18
     662:	32 2f       	mov	r19, r18
					  work_space[k]='0';
     664:	d1 a2       	lds	r29, 0x91
     666:	c0 a2       	lds	r28, 0x90
					  mirror[k]='0';
     668:	e1 e4       	ldi	r30, 0x41	; 65
     66a:	f0 e0       	ldi	r31, 0x00	; 0
     66c:	ec 0f       	add	r30, r28
     66e:	fd 1f       	adc	r31, r29
     670:	ea 0f       	add	r30, r26
     672:	fb 1f       	adc	r31, r27
     674:	e0 82       	st	Z, r14
					  break;
				  }
				  
			  }
			  result=left+right;
			  work_space[g]=result;
     676:	cb 01       	movw	r24, r22
     678:	88 0f       	add	r24, r24
     67a:	99 1f       	adc	r25, r25
     67c:	e1 e0       	ldi	r30, 0x01	; 1
     67e:	f0 e0       	ldi	r31, 0x00	; 0
     680:	ec 0f       	add	r30, r28
     682:	fd 1f       	adc	r31, r29
     684:	e8 0f       	add	r30, r24
     686:	f9 1f       	adc	r31, r25
					  mirror[k]='0';
					  break;
				  }
				  
			  }
			  result=left+right;
     688:	d9 01       	movw	r26, r18
     68a:	c8 01       	movw	r24, r16
     68c:	84 0d       	add	r24, r4
     68e:	95 1d       	adc	r25, r5
     690:	a6 1d       	adc	r26, r6
     692:	b7 1d       	adc	r27, r7
			  work_space[g]=result;
     694:	91 a3       	lds	r25, 0x51
     696:	80 a3       	lds	r24, 0x50
     698:	4a c0       	rjmp	.+148    	; 0x72e <main+0x69c>
			  
		  }
		  else if ((mirror[g]=='-'))
		  {
			  k=g;//k used
			  while(k<=big_count)
     69a:	a2 16       	cp	r10, r18
     69c:	b3 06       	cpc	r11, r19
     69e:	d8 f0       	brcs	.+54     	; 0x6d6 <main+0x644>
			  {
				  k++;
				  if (mirror[k]==1);
				  {
					  right=work_space[k];
     6a0:	24 2f       	mov	r18, r20
     6a2:	30 e0       	ldi	r19, 0x00	; 0
     6a4:	c9 01       	movw	r24, r18
     6a6:	88 0f       	add	r24, r24
     6a8:	99 1f       	adc	r25, r25
     6aa:	e1 e0       	ldi	r30, 0x01	; 1
     6ac:	f0 e0       	ldi	r31, 0x00	; 0
     6ae:	ec 0f       	add	r30, r28
     6b0:	fd 1f       	adc	r31, r29
     6b2:	e8 0f       	add	r30, r24
     6b4:	f9 1f       	adc	r31, r25
     6b6:	80 a1       	lds	r24, 0x40
     6b8:	91 a1       	lds	r25, 0x41
     6ba:	2c 01       	movw	r4, r24
     6bc:	66 24       	eor	r6, r6
     6be:	57 fc       	sbrc	r5, 7
     6c0:	60 94       	com	r6
     6c2:	76 2c       	mov	r7, r6
					  work_space[k]='0';
     6c4:	d1 a2       	lds	r29, 0x91
     6c6:	c0 a2       	lds	r28, 0x90
					  mirror[k]='0';
     6c8:	e1 e4       	ldi	r30, 0x41	; 65
     6ca:	f0 e0       	ldi	r31, 0x00	; 0
     6cc:	ec 0f       	add	r30, r28
     6ce:	fd 1f       	adc	r31, r29
     6d0:	e2 0f       	add	r30, r18
     6d2:	f3 1f       	adc	r31, r19
     6d4:	e0 82       	st	Z, r14
			  while(k>=0)
			  {
				  k--;
				  if (mirror[k]==1);
				  {
					  left=work_space[k];
     6d6:	a5 2f       	mov	r26, r21
     6d8:	b0 e0       	ldi	r27, 0x00	; 0
     6da:	cd 01       	movw	r24, r26
     6dc:	88 0f       	add	r24, r24
     6de:	99 1f       	adc	r25, r25
     6e0:	e1 e0       	ldi	r30, 0x01	; 1
     6e2:	f0 e0       	ldi	r31, 0x00	; 0
     6e4:	ec 0f       	add	r30, r28
     6e6:	fd 1f       	adc	r31, r29
     6e8:	e8 0f       	add	r30, r24
     6ea:	f9 1f       	adc	r31, r25
     6ec:	80 a1       	lds	r24, 0x40
     6ee:	91 a1       	lds	r25, 0x41
     6f0:	8c 01       	movw	r16, r24
     6f2:	22 27       	eor	r18, r18
     6f4:	17 fd       	sbrc	r17, 7
     6f6:	20 95       	com	r18
     6f8:	32 2f       	mov	r19, r18
					  work_space[k]='0';
     6fa:	d1 a2       	lds	r29, 0x91
     6fc:	c0 a2       	lds	r28, 0x90
					  mirror[k]='0';
     6fe:	e1 e4       	ldi	r30, 0x41	; 65
     700:	f0 e0       	ldi	r31, 0x00	; 0
     702:	ec 0f       	add	r30, r28
     704:	fd 1f       	adc	r31, r29
     706:	ea 0f       	add	r30, r26
     708:	fb 1f       	adc	r31, r27
     70a:	e0 82       	st	Z, r14
					  break;
				  }
				  
			  }
			  result=left-right;
			  work_space[g]=result;
     70c:	cb 01       	movw	r24, r22
     70e:	88 0f       	add	r24, r24
     710:	99 1f       	adc	r25, r25
     712:	e1 e0       	ldi	r30, 0x01	; 1
     714:	f0 e0       	ldi	r31, 0x00	; 0
     716:	ec 0f       	add	r30, r28
     718:	fd 1f       	adc	r31, r29
     71a:	e8 0f       	add	r30, r24
     71c:	f9 1f       	adc	r31, r25
					  mirror[k]='0';
					  break;
				  }
				  
			  }
			  result=left-right;
     71e:	d9 01       	movw	r26, r18
     720:	c8 01       	movw	r24, r16
     722:	84 19       	sub	r24, r4
     724:	95 09       	sbc	r25, r5
     726:	a6 09       	sbc	r26, r6
     728:	b7 09       	sbc	r27, r7
			  work_space[g]=result;
     72a:	91 a3       	lds	r25, 0x51
     72c:	80 a3       	lds	r24, 0x50

 }// big for
 /************************************************************************/
 /* sum for                                                                     */
 /************************************************************************/
  for(g=0;g<big_count;g++)//g used
     72e:	24 2f       	mov	r18, r20
     730:	30 e0       	ldi	r19, 0x00	; 0
     732:	4f 5f       	subi	r20, 0xFF	; 255
     734:	5f 5f       	subi	r21, 0xFF	; 255
     736:	2a 15       	cp	r18, r10
     738:	3b 05       	cpc	r19, r11
     73a:	08 f4       	brcc	.+2      	; 0x73e <main+0x6ac>
     73c:	53 cf       	rjmp	.-346    	; 0x5e4 <main+0x552>
		  }
		  
	  }

  }// last sum for
 while (work_space[n]=='0')
     73e:	69 a1       	lds	r22, 0x49
     740:	7a a1       	lds	r23, 0x4a
     742:	60 33       	cpi	r22, 0x30	; 48
     744:	71 05       	cpc	r23, r1
     746:	89 f4       	brne	.+34     	; 0x76a <main+0x6d8>
     748:	80 e0       	ldi	r24, 0x00	; 0
  {
n++;
     74a:	8f 5f       	subi	r24, 0xFF	; 255
		  }
		  
	  }

  }// last sum for
 while (work_space[n]=='0')
     74c:	e8 2f       	mov	r30, r24
     74e:	f0 e0       	ldi	r31, 0x00	; 0
     750:	ee 0f       	add	r30, r30
     752:	ff 1f       	adc	r31, r31
     754:	a1 e0       	ldi	r26, 0x01	; 1
     756:	b0 e0       	ldi	r27, 0x00	; 0
     758:	ac 0f       	add	r26, r28
     75a:	bd 1f       	adc	r27, r29
     75c:	ea 0f       	add	r30, r26
     75e:	fb 1f       	adc	r31, r27
     760:	60 a1       	lds	r22, 0x40
     762:	71 a1       	lds	r23, 0x41
     764:	60 33       	cpi	r22, 0x30	; 48
     766:	71 05       	cpc	r23, r1
     768:	81 f3       	breq	.-32     	; 0x74a <main+0x6b8>
  {
n++;
  } 

tostring(str,work_space[n]);
     76a:	ce 01       	movw	r24, r28
     76c:	8f 5a       	subi	r24, 0xAF	; 175
     76e:	9f 4f       	sbci	r25, 0xFF	; 255
     770:	0e 94 45 07 	call	0xe8a	; 0xe8a <tostring>
 lcd_send_cmd(clr_screen);
     774:	81 e0       	ldi	r24, 0x01	; 1
     776:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <lcd_send_cmd>
 lcd_send_string(str);
     77a:	ce 01       	movw	r24, r28
     77c:	8f 5a       	subi	r24, 0xAF	; 175
     77e:	9f 4f       	sbci	r25, 0xFF	; 255
     780:	0e 94 05 09 	call	0x120a	; 0x120a <lcd_send_string>
     784:	8f ef       	ldi	r24, 0xFF	; 255
     786:	91 e1       	ldi	r25, 0x11	; 17
     788:	aa e7       	ldi	r26, 0x7A	; 122
     78a:	81 50       	subi	r24, 0x01	; 1
     78c:	90 40       	sbci	r25, 0x00	; 0
     78e:	a0 40       	sbci	r26, 0x00	; 0
     790:	e1 f7       	brne	.-8      	; 0x78a <main+0x6f8>
     792:	00 c0       	rjmp	.+0      	; 0x794 <main+0x702>
     794:	00 00       	nop
	  int l;// percentage
	  unsigned short big_count=0;
    while(1)
    {
  a=0;//
  b=0;//
     796:	00 e0       	ldi	r16, 0x00	; 0
 char_count=0;//number of operators
 result=0;
last_res=0;
 res=0;
  sum=0;
  for (a=0;a<16;a++)//a used
     798:	10 e0       	ldi	r17, 0x00	; 0
  offset=0;
 right=0;
 left=0;
 last_res=0;
num_count=0;//numbe of digits befor concat
 char_count=0;//number of operators
     79a:	ee 24       	eor	r14, r14
     79c:	ff 24       	eor	r15, r15
  p=0;
  offset=0;
 right=0;
 left=0;
 last_res=0;
num_count=0;//numbe of digits befor concat
     79e:	cc 24       	eor	r12, r12
     7a0:	dd 24       	eor	r13, r13
     7a2:	39 cd       	rjmp	.-1422   	; 0x216 <main+0x184>
//lcd_send_char(num_count+48);	
//for(;;);
//}

/*****************************/
first[a]=key_pad_recive;
     7a4:	81 2f       	mov	r24, r17
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	88 0f       	add	r24, r24
     7aa:	99 1f       	adc	r25, r25
     7ac:	a1 e0       	ldi	r26, 0x01	; 1
     7ae:	b0 e0       	ldi	r27, 0x00	; 0
     7b0:	ac 0f       	add	r26, r28
     7b2:	bd 1f       	adc	r27, r29
     7b4:	8a 0f       	add	r24, r26
     7b6:	9b 1f       	adc	r25, r27
     7b8:	2d e3       	ldi	r18, 0x3D	; 61
     7ba:	30 e0       	ldi	r19, 0x00	; 0
     7bc:	fc 01       	movw	r30, r24
     7be:	31 83       	std	Z+1, r19	; 0x01
     7c0:	20 83       	st	Z, r18
char_count++;
     7c2:	08 94       	sec
     7c4:	e1 1c       	adc	r14, r1
     7c6:	f1 1c       	adc	r15, r1

digits_mum[b]=num_count;//b used
     7c8:	80 2f       	mov	r24, r16
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	88 0f       	add	r24, r24
     7ce:	99 1f       	adc	r25, r25
     7d0:	2c e5       	ldi	r18, 0x5C	; 92
     7d2:	30 e0       	ldi	r19, 0x00	; 0
     7d4:	2c 0f       	add	r18, r28
     7d6:	3d 1f       	adc	r19, r29
     7d8:	82 0f       	add	r24, r18
     7da:	93 1f       	adc	r25, r19
     7dc:	dc 01       	movw	r26, r24
     7de:	11 96       	adiw	r26, 0x01	; 1
     7e0:	dc 92       	st	X, r13
     7e2:	ce 92       	st	-X, r12
b++;
     7e4:	0f 5f       	subi	r16, 0xFF	; 255
     7e6:	1a cd       	rjmp	.-1484   	; 0x21c <main+0x18a>

000007e8 <dio_set_pin>:
 */ 
#include <avr/io.h>
#define  F_CPU  8000000Ul
void dio_set_pin(char port,char pin,char dir)
{
	switch (port)
     7e8:	84 34       	cpi	r24, 0x44	; 68
     7ea:	09 f4       	brne	.+2      	; 0x7ee <dio_set_pin+0x6>
     7ec:	71 c0       	rjmp	.+226    	; 0x8d0 <__stack+0x71>
     7ee:	85 34       	cpi	r24, 0x45	; 69
     7f0:	48 f4       	brcc	.+18     	; 0x804 <dio_set_pin+0x1c>
     7f2:	82 34       	cpi	r24, 0x42	; 66
     7f4:	99 f1       	breq	.+102    	; 0x85c <dio_set_pin+0x74>
     7f6:	83 34       	cpi	r24, 0x43	; 67
     7f8:	08 f0       	brcs	.+2      	; 0x7fc <dio_set_pin+0x14>
     7fa:	4d c0       	rjmp	.+154    	; 0x896 <__stack+0x37>
     7fc:	81 34       	cpi	r24, 0x41	; 65
     7fe:	09 f0       	breq	.+2      	; 0x802 <dio_set_pin+0x1a>
     800:	83 c0       	rjmp	.+262    	; 0x908 <__stack+0xa9>
     802:	0f c0       	rjmp	.+30     	; 0x822 <dio_set_pin+0x3a>
     804:	82 36       	cpi	r24, 0x62	; 98
     806:	51 f1       	breq	.+84     	; 0x85c <dio_set_pin+0x74>
     808:	83 36       	cpi	r24, 0x63	; 99
     80a:	20 f4       	brcc	.+8      	; 0x814 <dio_set_pin+0x2c>
     80c:	81 36       	cpi	r24, 0x61	; 97
     80e:	09 f0       	breq	.+2      	; 0x812 <dio_set_pin+0x2a>
     810:	7b c0       	rjmp	.+246    	; 0x908 <__stack+0xa9>
     812:	07 c0       	rjmp	.+14     	; 0x822 <dio_set_pin+0x3a>
     814:	83 36       	cpi	r24, 0x63	; 99
     816:	09 f4       	brne	.+2      	; 0x81a <dio_set_pin+0x32>
     818:	3e c0       	rjmp	.+124    	; 0x896 <__stack+0x37>
     81a:	84 36       	cpi	r24, 0x64	; 100
     81c:	09 f0       	breq	.+2      	; 0x820 <dio_set_pin+0x38>
     81e:	74 c0       	rjmp	.+232    	; 0x908 <__stack+0xa9>
     820:	57 c0       	rjmp	.+174    	; 0x8d0 <__stack+0x71>
	{
		case 'A':
			case 'a':
			if (dir ==1)
     822:	41 30       	cpi	r20, 0x01	; 1
     824:	69 f4       	brne	.+26     	; 0x840 <dio_set_pin+0x58>
			{
			DDRA|=(1<<pin);
     826:	2a b3       	in	r18, 0x1a	; 26
     828:	81 e0       	ldi	r24, 0x01	; 1
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	ac 01       	movw	r20, r24
     82e:	02 c0       	rjmp	.+4      	; 0x834 <dio_set_pin+0x4c>
     830:	44 0f       	add	r20, r20
     832:	55 1f       	adc	r21, r21
     834:	6a 95       	dec	r22
     836:	e2 f7       	brpl	.-8      	; 0x830 <dio_set_pin+0x48>
     838:	ba 01       	movw	r22, r20
     83a:	62 2b       	or	r22, r18
     83c:	6a bb       	out	0x1a, r22	; 26
     83e:	08 95       	ret
			}
	else
	{
	DDRA&=(~(1<<pin));	
     840:	2a b3       	in	r18, 0x1a	; 26
     842:	81 e0       	ldi	r24, 0x01	; 1
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	ac 01       	movw	r20, r24
     848:	02 c0       	rjmp	.+4      	; 0x84e <dio_set_pin+0x66>
     84a:	44 0f       	add	r20, r20
     84c:	55 1f       	adc	r21, r21
     84e:	6a 95       	dec	r22
     850:	e2 f7       	brpl	.-8      	; 0x84a <dio_set_pin+0x62>
     852:	ba 01       	movw	r22, r20
     854:	60 95       	com	r22
     856:	62 23       	and	r22, r18
     858:	6a bb       	out	0x1a, r22	; 26
     85a:	08 95       	ret
	}break;
	
	case 'B':
	case 'b':
	if (dir ==1)
     85c:	41 30       	cpi	r20, 0x01	; 1
     85e:	69 f4       	brne	.+26     	; 0x87a <__stack+0x1b>
	{
		DDRB|=(1<<pin);
     860:	27 b3       	in	r18, 0x17	; 23
     862:	81 e0       	ldi	r24, 0x01	; 1
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	ac 01       	movw	r20, r24
     868:	02 c0       	rjmp	.+4      	; 0x86e <__stack+0xf>
     86a:	44 0f       	add	r20, r20
     86c:	55 1f       	adc	r21, r21
     86e:	6a 95       	dec	r22
     870:	e2 f7       	brpl	.-8      	; 0x86a <__stack+0xb>
     872:	ba 01       	movw	r22, r20
     874:	62 2b       	or	r22, r18
     876:	67 bb       	out	0x17, r22	; 23
     878:	08 95       	ret
	}
	else
	{
		DDRB&=(~(1<<pin));
     87a:	27 b3       	in	r18, 0x17	; 23
     87c:	81 e0       	ldi	r24, 0x01	; 1
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	ac 01       	movw	r20, r24
     882:	02 c0       	rjmp	.+4      	; 0x888 <__stack+0x29>
     884:	44 0f       	add	r20, r20
     886:	55 1f       	adc	r21, r21
     888:	6a 95       	dec	r22
     88a:	e2 f7       	brpl	.-8      	; 0x884 <__stack+0x25>
     88c:	ba 01       	movw	r22, r20
     88e:	60 95       	com	r22
     890:	62 23       	and	r22, r18
     892:	67 bb       	out	0x17, r22	; 23
     894:	08 95       	ret
	}break;

case 'C':
case 'c':
if (dir ==1)
     896:	41 30       	cpi	r20, 0x01	; 1
     898:	69 f4       	brne	.+26     	; 0x8b4 <__stack+0x55>
{
	DDRC|=(1<<pin);
     89a:	24 b3       	in	r18, 0x14	; 20
     89c:	81 e0       	ldi	r24, 0x01	; 1
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	ac 01       	movw	r20, r24
     8a2:	02 c0       	rjmp	.+4      	; 0x8a8 <__stack+0x49>
     8a4:	44 0f       	add	r20, r20
     8a6:	55 1f       	adc	r21, r21
     8a8:	6a 95       	dec	r22
     8aa:	e2 f7       	brpl	.-8      	; 0x8a4 <__stack+0x45>
     8ac:	ba 01       	movw	r22, r20
     8ae:	62 2b       	or	r22, r18
     8b0:	64 bb       	out	0x14, r22	; 20
     8b2:	08 95       	ret
}
else
{
	DDRC&=(~(1<<pin));
     8b4:	24 b3       	in	r18, 0x14	; 20
     8b6:	81 e0       	ldi	r24, 0x01	; 1
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	ac 01       	movw	r20, r24
     8bc:	02 c0       	rjmp	.+4      	; 0x8c2 <__stack+0x63>
     8be:	44 0f       	add	r20, r20
     8c0:	55 1f       	adc	r21, r21
     8c2:	6a 95       	dec	r22
     8c4:	e2 f7       	brpl	.-8      	; 0x8be <__stack+0x5f>
     8c6:	ba 01       	movw	r22, r20
     8c8:	60 95       	com	r22
     8ca:	62 23       	and	r22, r18
     8cc:	64 bb       	out	0x14, r22	; 20
     8ce:	08 95       	ret
}break;
	
	case 'D':
	case 'd':
	if (dir ==1)
     8d0:	41 30       	cpi	r20, 0x01	; 1
     8d2:	69 f4       	brne	.+26     	; 0x8ee <__stack+0x8f>
	{
		DDRD|=(1<<pin);
     8d4:	21 b3       	in	r18, 0x11	; 17
     8d6:	81 e0       	ldi	r24, 0x01	; 1
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	ac 01       	movw	r20, r24
     8dc:	02 c0       	rjmp	.+4      	; 0x8e2 <__stack+0x83>
     8de:	44 0f       	add	r20, r20
     8e0:	55 1f       	adc	r21, r21
     8e2:	6a 95       	dec	r22
     8e4:	e2 f7       	brpl	.-8      	; 0x8de <__stack+0x7f>
     8e6:	ba 01       	movw	r22, r20
     8e8:	62 2b       	or	r22, r18
     8ea:	61 bb       	out	0x11, r22	; 17
     8ec:	08 95       	ret
	}
	else
	{
		DDRD&=(~(1<<pin));
     8ee:	21 b3       	in	r18, 0x11	; 17
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	ac 01       	movw	r20, r24
     8f6:	02 c0       	rjmp	.+4      	; 0x8fc <__stack+0x9d>
     8f8:	44 0f       	add	r20, r20
     8fa:	55 1f       	adc	r21, r21
     8fc:	6a 95       	dec	r22
     8fe:	e2 f7       	brpl	.-8      	; 0x8f8 <__stack+0x99>
     900:	ba 01       	movw	r22, r20
     902:	60 95       	com	r22
     904:	62 23       	and	r22, r18
     906:	61 bb       	out	0x11, r22	; 17
     908:	08 95       	ret

0000090a <dio_write_pin>:
	break;
}
	}
	void dio_write_pin(char port,char pin,char val)
	{
		switch(port)
     90a:	84 34       	cpi	r24, 0x44	; 68
     90c:	09 f4       	brne	.+2      	; 0x910 <dio_write_pin+0x6>
     90e:	71 c0       	rjmp	.+226    	; 0x9f2 <dio_write_pin+0xe8>
     910:	85 34       	cpi	r24, 0x45	; 69
     912:	48 f4       	brcc	.+18     	; 0x926 <dio_write_pin+0x1c>
     914:	82 34       	cpi	r24, 0x42	; 66
     916:	99 f1       	breq	.+102    	; 0x97e <dio_write_pin+0x74>
     918:	83 34       	cpi	r24, 0x43	; 67
     91a:	08 f0       	brcs	.+2      	; 0x91e <dio_write_pin+0x14>
     91c:	4d c0       	rjmp	.+154    	; 0x9b8 <dio_write_pin+0xae>
     91e:	81 34       	cpi	r24, 0x41	; 65
     920:	09 f0       	breq	.+2      	; 0x924 <dio_write_pin+0x1a>
     922:	83 c0       	rjmp	.+262    	; 0xa2a <dio_write_pin+0x120>
     924:	0f c0       	rjmp	.+30     	; 0x944 <dio_write_pin+0x3a>
     926:	82 36       	cpi	r24, 0x62	; 98
     928:	51 f1       	breq	.+84     	; 0x97e <dio_write_pin+0x74>
     92a:	83 36       	cpi	r24, 0x63	; 99
     92c:	20 f4       	brcc	.+8      	; 0x936 <dio_write_pin+0x2c>
     92e:	81 36       	cpi	r24, 0x61	; 97
     930:	09 f0       	breq	.+2      	; 0x934 <dio_write_pin+0x2a>
     932:	7b c0       	rjmp	.+246    	; 0xa2a <dio_write_pin+0x120>
     934:	07 c0       	rjmp	.+14     	; 0x944 <dio_write_pin+0x3a>
     936:	83 36       	cpi	r24, 0x63	; 99
     938:	09 f4       	brne	.+2      	; 0x93c <dio_write_pin+0x32>
     93a:	3e c0       	rjmp	.+124    	; 0x9b8 <dio_write_pin+0xae>
     93c:	84 36       	cpi	r24, 0x64	; 100
     93e:	09 f0       	breq	.+2      	; 0x942 <dio_write_pin+0x38>
     940:	74 c0       	rjmp	.+232    	; 0xa2a <dio_write_pin+0x120>
     942:	57 c0       	rjmp	.+174    	; 0x9f2 <dio_write_pin+0xe8>
	{
		case  'A':
		case 'a':
		if (val==1)
     944:	41 30       	cpi	r20, 0x01	; 1
     946:	69 f4       	brne	.+26     	; 0x962 <dio_write_pin+0x58>
		{
		PORTA=PORTA|(1<<pin);
     948:	2b b3       	in	r18, 0x1b	; 27
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	ac 01       	movw	r20, r24
     950:	02 c0       	rjmp	.+4      	; 0x956 <dio_write_pin+0x4c>
     952:	44 0f       	add	r20, r20
     954:	55 1f       	adc	r21, r21
     956:	6a 95       	dec	r22
     958:	e2 f7       	brpl	.-8      	; 0x952 <dio_write_pin+0x48>
     95a:	ba 01       	movw	r22, r20
     95c:	62 2b       	or	r22, r18
     95e:	6b bb       	out	0x1b, r22	; 27
     960:	08 95       	ret
		}
	else
	{
		PORTA=PORTA & (~(1<<pin));
     962:	2b b3       	in	r18, 0x1b	; 27
     964:	81 e0       	ldi	r24, 0x01	; 1
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	ac 01       	movw	r20, r24
     96a:	02 c0       	rjmp	.+4      	; 0x970 <dio_write_pin+0x66>
     96c:	44 0f       	add	r20, r20
     96e:	55 1f       	adc	r21, r21
     970:	6a 95       	dec	r22
     972:	e2 f7       	brpl	.-8      	; 0x96c <dio_write_pin+0x62>
     974:	ba 01       	movw	r22, r20
     976:	60 95       	com	r22
     978:	62 23       	and	r22, r18
     97a:	6b bb       	out	0x1b, r22	; 27
     97c:	08 95       	ret
	}break;
	case  'B':
	case 'b':
	if (val==1)
     97e:	41 30       	cpi	r20, 0x01	; 1
     980:	69 f4       	brne	.+26     	; 0x99c <dio_write_pin+0x92>
	{
		PORTB=PORTB|(1<<pin);
     982:	28 b3       	in	r18, 0x18	; 24
     984:	81 e0       	ldi	r24, 0x01	; 1
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	ac 01       	movw	r20, r24
     98a:	02 c0       	rjmp	.+4      	; 0x990 <dio_write_pin+0x86>
     98c:	44 0f       	add	r20, r20
     98e:	55 1f       	adc	r21, r21
     990:	6a 95       	dec	r22
     992:	e2 f7       	brpl	.-8      	; 0x98c <dio_write_pin+0x82>
     994:	ba 01       	movw	r22, r20
     996:	62 2b       	or	r22, r18
     998:	68 bb       	out	0x18, r22	; 24
     99a:	08 95       	ret
	}
	else
	{
		PORTB=PORTB & (~(1<<pin));
     99c:	28 b3       	in	r18, 0x18	; 24
     99e:	81 e0       	ldi	r24, 0x01	; 1
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	ac 01       	movw	r20, r24
     9a4:	02 c0       	rjmp	.+4      	; 0x9aa <dio_write_pin+0xa0>
     9a6:	44 0f       	add	r20, r20
     9a8:	55 1f       	adc	r21, r21
     9aa:	6a 95       	dec	r22
     9ac:	e2 f7       	brpl	.-8      	; 0x9a6 <dio_write_pin+0x9c>
     9ae:	ba 01       	movw	r22, r20
     9b0:	60 95       	com	r22
     9b2:	62 23       	and	r22, r18
     9b4:	68 bb       	out	0x18, r22	; 24
     9b6:	08 95       	ret
	}break;
	case 'C':
	case 'c':
	if (val==1)
     9b8:	41 30       	cpi	r20, 0x01	; 1
     9ba:	69 f4       	brne	.+26     	; 0x9d6 <dio_write_pin+0xcc>
	{
		PORTC =PORTC |(1<<pin);
     9bc:	25 b3       	in	r18, 0x15	; 21
     9be:	81 e0       	ldi	r24, 0x01	; 1
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	ac 01       	movw	r20, r24
     9c4:	02 c0       	rjmp	.+4      	; 0x9ca <dio_write_pin+0xc0>
     9c6:	44 0f       	add	r20, r20
     9c8:	55 1f       	adc	r21, r21
     9ca:	6a 95       	dec	r22
     9cc:	e2 f7       	brpl	.-8      	; 0x9c6 <dio_write_pin+0xbc>
     9ce:	ba 01       	movw	r22, r20
     9d0:	62 2b       	or	r22, r18
     9d2:	65 bb       	out	0x15, r22	; 21
     9d4:	08 95       	ret
	}
	else
	{
		PORTC =PORTC  & (~(1<<pin));
     9d6:	25 b3       	in	r18, 0x15	; 21
     9d8:	81 e0       	ldi	r24, 0x01	; 1
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	ac 01       	movw	r20, r24
     9de:	02 c0       	rjmp	.+4      	; 0x9e4 <dio_write_pin+0xda>
     9e0:	44 0f       	add	r20, r20
     9e2:	55 1f       	adc	r21, r21
     9e4:	6a 95       	dec	r22
     9e6:	e2 f7       	brpl	.-8      	; 0x9e0 <dio_write_pin+0xd6>
     9e8:	ba 01       	movw	r22, r20
     9ea:	60 95       	com	r22
     9ec:	62 23       	and	r22, r18
     9ee:	65 bb       	out	0x15, r22	; 21
     9f0:	08 95       	ret
	}break;
	case 'D':
	case 'd':
	if (val==1)
     9f2:	41 30       	cpi	r20, 0x01	; 1
     9f4:	69 f4       	brne	.+26     	; 0xa10 <dio_write_pin+0x106>
	{
		PORTD =PORTD |(1<<pin);
     9f6:	22 b3       	in	r18, 0x12	; 18
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	ac 01       	movw	r20, r24
     9fe:	02 c0       	rjmp	.+4      	; 0xa04 <dio_write_pin+0xfa>
     a00:	44 0f       	add	r20, r20
     a02:	55 1f       	adc	r21, r21
     a04:	6a 95       	dec	r22
     a06:	e2 f7       	brpl	.-8      	; 0xa00 <dio_write_pin+0xf6>
     a08:	ba 01       	movw	r22, r20
     a0a:	62 2b       	or	r22, r18
     a0c:	62 bb       	out	0x12, r22	; 18
     a0e:	08 95       	ret
	}
	else
	{
		PORTD =PORTD  & (~(1<<pin));
     a10:	22 b3       	in	r18, 0x12	; 18
     a12:	81 e0       	ldi	r24, 0x01	; 1
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	ac 01       	movw	r20, r24
     a18:	02 c0       	rjmp	.+4      	; 0xa1e <dio_write_pin+0x114>
     a1a:	44 0f       	add	r20, r20
     a1c:	55 1f       	adc	r21, r21
     a1e:	6a 95       	dec	r22
     a20:	e2 f7       	brpl	.-8      	; 0xa1a <dio_write_pin+0x110>
     a22:	ba 01       	movw	r22, r20
     a24:	60 95       	com	r22
     a26:	62 23       	and	r22, r18
     a28:	62 bb       	out	0x12, r22	; 18
     a2a:	08 95       	ret

00000a2c <dio_read_pin>:
	}	
	}
		unsigned char dio_read_pin(	unsigned char port,	unsigned char pin)
		{
		unsigned char val ;
		switch(port)
     a2c:	84 34       	cpi	r24, 0x44	; 68
     a2e:	b1 f1       	breq	.+108    	; 0xa9c <dio_read_pin+0x70>
     a30:	85 34       	cpi	r24, 0x45	; 69
     a32:	38 f4       	brcc	.+14     	; 0xa42 <dio_read_pin+0x16>
     a34:	82 34       	cpi	r24, 0x42	; 66
     a36:	e1 f0       	breq	.+56     	; 0xa70 <dio_read_pin+0x44>
     a38:	83 34       	cpi	r24, 0x43	; 67
     a3a:	28 f5       	brcc	.+74     	; 0xa86 <dio_read_pin+0x5a>
     a3c:	81 34       	cpi	r24, 0x41	; 65
     a3e:	c1 f5       	brne	.+112    	; 0xab0 <dio_read_pin+0x84>
     a40:	0c c0       	rjmp	.+24     	; 0xa5a <dio_read_pin+0x2e>
     a42:	82 36       	cpi	r24, 0x62	; 98
     a44:	a9 f0       	breq	.+42     	; 0xa70 <dio_read_pin+0x44>
     a46:	83 36       	cpi	r24, 0x63	; 99
     a48:	18 f4       	brcc	.+6      	; 0xa50 <dio_read_pin+0x24>
     a4a:	81 36       	cpi	r24, 0x61	; 97
     a4c:	89 f5       	brne	.+98     	; 0xab0 <dio_read_pin+0x84>
     a4e:	05 c0       	rjmp	.+10     	; 0xa5a <dio_read_pin+0x2e>
     a50:	83 36       	cpi	r24, 0x63	; 99
     a52:	c9 f0       	breq	.+50     	; 0xa86 <dio_read_pin+0x5a>
     a54:	84 36       	cpi	r24, 0x64	; 100
     a56:	61 f5       	brne	.+88     	; 0xab0 <dio_read_pin+0x84>
     a58:	21 c0       	rjmp	.+66     	; 0xa9c <dio_read_pin+0x70>
		{
		case 'A':
		case 'a':	
		val =((PINA>>pin)&1);
     a5a:	29 b3       	in	r18, 0x19	; 25
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	c9 01       	movw	r24, r18
     a60:	02 c0       	rjmp	.+4      	; 0xa66 <dio_read_pin+0x3a>
     a62:	95 95       	asr	r25
     a64:	87 95       	ror	r24
     a66:	6a 95       	dec	r22
     a68:	e2 f7       	brpl	.-8      	; 0xa62 <dio_read_pin+0x36>
     a6a:	98 2f       	mov	r25, r24
     a6c:	91 70       	andi	r25, 0x01	; 1
		break;
     a6e:	20 c0       	rjmp	.+64     	; 0xab0 <dio_read_pin+0x84>
		case  'B':
		case 'b':
		val =((PINB>>pin)&1);
     a70:	26 b3       	in	r18, 0x16	; 22
     a72:	30 e0       	ldi	r19, 0x00	; 0
     a74:	c9 01       	movw	r24, r18
     a76:	02 c0       	rjmp	.+4      	; 0xa7c <dio_read_pin+0x50>
     a78:	95 95       	asr	r25
     a7a:	87 95       	ror	r24
     a7c:	6a 95       	dec	r22
     a7e:	e2 f7       	brpl	.-8      	; 0xa78 <dio_read_pin+0x4c>
     a80:	98 2f       	mov	r25, r24
     a82:	91 70       	andi	r25, 0x01	; 1
			break;;
     a84:	15 c0       	rjmp	.+42     	; 0xab0 <dio_read_pin+0x84>
		case  'C':
		case 'c':
		val =((PINC>>pin)&1);
     a86:	23 b3       	in	r18, 0x13	; 19
     a88:	30 e0       	ldi	r19, 0x00	; 0
     a8a:	c9 01       	movw	r24, r18
     a8c:	02 c0       	rjmp	.+4      	; 0xa92 <dio_read_pin+0x66>
     a8e:	95 95       	asr	r25
     a90:	87 95       	ror	r24
     a92:	6a 95       	dec	r22
     a94:	e2 f7       	brpl	.-8      	; 0xa8e <dio_read_pin+0x62>
     a96:	98 2f       	mov	r25, r24
     a98:	91 70       	andi	r25, 0x01	; 1
			break;
     a9a:	0a c0       	rjmp	.+20     	; 0xab0 <dio_read_pin+0x84>
			case  'D':
			case 'd':
			val =((PIND>>pin)&1);
     a9c:	20 b3       	in	r18, 0x10	; 16
     a9e:	30 e0       	ldi	r19, 0x00	; 0
     aa0:	c9 01       	movw	r24, r18
     aa2:	02 c0       	rjmp	.+4      	; 0xaa8 <dio_read_pin+0x7c>
     aa4:	95 95       	asr	r25
     aa6:	87 95       	ror	r24
     aa8:	6a 95       	dec	r22
     aaa:	e2 f7       	brpl	.-8      	; 0xaa4 <dio_read_pin+0x78>
     aac:	98 2f       	mov	r25, r24
     aae:	91 70       	andi	r25, 0x01	; 1
			default:
			break;
		
		}
		return val;
				}		
     ab0:	89 2f       	mov	r24, r25
     ab2:	08 95       	ret

00000ab4 <dio_toggle_pin>:
				void dio_toggle_pin(char port,char pin)
				{
					switch (port)
     ab4:	84 34       	cpi	r24, 0x44	; 68
     ab6:	09 f4       	brne	.+2      	; 0xaba <dio_toggle_pin+0x6>
     ab8:	3d c0       	rjmp	.+122    	; 0xb34 <dio_toggle_pin+0x80>
     aba:	85 34       	cpi	r24, 0x45	; 69
     abc:	40 f4       	brcc	.+16     	; 0xace <dio_toggle_pin+0x1a>
     abe:	82 34       	cpi	r24, 0x42	; 66
     ac0:	f9 f0       	breq	.+62     	; 0xb00 <dio_toggle_pin+0x4c>
     ac2:	83 34       	cpi	r24, 0x43	; 67
     ac4:	50 f5       	brcc	.+84     	; 0xb1a <dio_toggle_pin+0x66>
     ac6:	81 34       	cpi	r24, 0x41	; 65
     ac8:	09 f0       	breq	.+2      	; 0xacc <dio_toggle_pin+0x18>
     aca:	40 c0       	rjmp	.+128    	; 0xb4c <dio_toggle_pin+0x98>
     acc:	0c c0       	rjmp	.+24     	; 0xae6 <dio_toggle_pin+0x32>
     ace:	82 36       	cpi	r24, 0x62	; 98
     ad0:	b9 f0       	breq	.+46     	; 0xb00 <dio_toggle_pin+0x4c>
     ad2:	83 36       	cpi	r24, 0x63	; 99
     ad4:	18 f4       	brcc	.+6      	; 0xadc <dio_toggle_pin+0x28>
     ad6:	81 36       	cpi	r24, 0x61	; 97
     ad8:	c9 f5       	brne	.+114    	; 0xb4c <dio_toggle_pin+0x98>
     ada:	05 c0       	rjmp	.+10     	; 0xae6 <dio_toggle_pin+0x32>
     adc:	83 36       	cpi	r24, 0x63	; 99
     ade:	e9 f0       	breq	.+58     	; 0xb1a <dio_toggle_pin+0x66>
     ae0:	84 36       	cpi	r24, 0x64	; 100
     ae2:	a1 f5       	brne	.+104    	; 0xb4c <dio_toggle_pin+0x98>
     ae4:	27 c0       	rjmp	.+78     	; 0xb34 <dio_toggle_pin+0x80>
					{
					case 'A':
					case 'a':
					PORTA=PORTA^(1<<pin);
     ae6:	2b b3       	in	r18, 0x1b	; 27
     ae8:	81 e0       	ldi	r24, 0x01	; 1
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	ac 01       	movw	r20, r24
     aee:	02 c0       	rjmp	.+4      	; 0xaf4 <dio_toggle_pin+0x40>
     af0:	44 0f       	add	r20, r20
     af2:	55 1f       	adc	r21, r21
     af4:	6a 95       	dec	r22
     af6:	e2 f7       	brpl	.-8      	; 0xaf0 <dio_toggle_pin+0x3c>
     af8:	ba 01       	movw	r22, r20
     afa:	62 27       	eor	r22, r18
     afc:	6b bb       	out	0x1b, r22	; 27
					break;
     afe:	08 95       	ret
					case 'b':
					case 'B':
					PORTB=PORTB^(1<<pin);
     b00:	28 b3       	in	r18, 0x18	; 24
     b02:	81 e0       	ldi	r24, 0x01	; 1
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	ac 01       	movw	r20, r24
     b08:	02 c0       	rjmp	.+4      	; 0xb0e <dio_toggle_pin+0x5a>
     b0a:	44 0f       	add	r20, r20
     b0c:	55 1f       	adc	r21, r21
     b0e:	6a 95       	dec	r22
     b10:	e2 f7       	brpl	.-8      	; 0xb0a <dio_toggle_pin+0x56>
     b12:	ba 01       	movw	r22, r20
     b14:	62 27       	eor	r22, r18
     b16:	68 bb       	out	0x18, r22	; 24
					break;
     b18:	08 95       	ret
					case 'C':
					case 'c':
					PORTC=PORTC^(1<<pin);
     b1a:	25 b3       	in	r18, 0x15	; 21
     b1c:	81 e0       	ldi	r24, 0x01	; 1
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	ac 01       	movw	r20, r24
     b22:	02 c0       	rjmp	.+4      	; 0xb28 <dio_toggle_pin+0x74>
     b24:	44 0f       	add	r20, r20
     b26:	55 1f       	adc	r21, r21
     b28:	6a 95       	dec	r22
     b2a:	e2 f7       	brpl	.-8      	; 0xb24 <dio_toggle_pin+0x70>
     b2c:	ba 01       	movw	r22, r20
     b2e:	62 27       	eor	r22, r18
     b30:	65 bb       	out	0x15, r22	; 21
					break;
     b32:	08 95       	ret
					case  'D':
					case 'd':
					PORTD=PORTD^(1<<pin);
     b34:	22 b3       	in	r18, 0x12	; 18
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	ac 01       	movw	r20, r24
     b3c:	02 c0       	rjmp	.+4      	; 0xb42 <dio_toggle_pin+0x8e>
     b3e:	44 0f       	add	r20, r20
     b40:	55 1f       	adc	r21, r21
     b42:	6a 95       	dec	r22
     b44:	e2 f7       	brpl	.-8      	; 0xb3e <dio_toggle_pin+0x8a>
     b46:	ba 01       	movw	r22, r20
     b48:	62 27       	eor	r22, r18
     b4a:	62 bb       	out	0x12, r22	; 18
     b4c:	08 95       	ret

00000b4e <dio_set_port>:
					break;
					}
			}
			void dio_set_port(unsigned char port,unsigned char dir)
			{
				switch(port)
     b4e:	84 34       	cpi	r24, 0x44	; 68
     b50:	d9 f0       	breq	.+54     	; 0xb88 <dio_set_port+0x3a>
     b52:	85 34       	cpi	r24, 0x45	; 69
     b54:	38 f4       	brcc	.+14     	; 0xb64 <dio_set_port+0x16>
     b56:	82 34       	cpi	r24, 0x42	; 66
     b58:	99 f0       	breq	.+38     	; 0xb80 <dio_set_port+0x32>
     b5a:	83 34       	cpi	r24, 0x43	; 67
     b5c:	98 f4       	brcc	.+38     	; 0xb84 <dio_set_port+0x36>
     b5e:	81 34       	cpi	r24, 0x41	; 65
     b60:	a1 f4       	brne	.+40     	; 0xb8a <dio_set_port+0x3c>
     b62:	0c c0       	rjmp	.+24     	; 0xb7c <dio_set_port+0x2e>
     b64:	82 36       	cpi	r24, 0x62	; 98
     b66:	61 f0       	breq	.+24     	; 0xb80 <dio_set_port+0x32>
     b68:	83 36       	cpi	r24, 0x63	; 99
     b6a:	18 f4       	brcc	.+6      	; 0xb72 <dio_set_port+0x24>
     b6c:	81 36       	cpi	r24, 0x61	; 97
     b6e:	69 f4       	brne	.+26     	; 0xb8a <dio_set_port+0x3c>
     b70:	05 c0       	rjmp	.+10     	; 0xb7c <dio_set_port+0x2e>
     b72:	83 36       	cpi	r24, 0x63	; 99
     b74:	39 f0       	breq	.+14     	; 0xb84 <dio_set_port+0x36>
     b76:	84 36       	cpi	r24, 0x64	; 100
     b78:	41 f4       	brne	.+16     	; 0xb8a <dio_set_port+0x3c>
     b7a:	06 c0       	rjmp	.+12     	; 0xb88 <dio_set_port+0x3a>
				{
				case 'A':
				case 'a':
					DDRA=dir;
     b7c:	6a bb       	out	0x1a, r22	; 26
	break;
     b7e:	08 95       	ret
	case 'b':
	case 'B':
	DDRB=dir;
     b80:	67 bb       	out	0x17, r22	; 23
	break;
     b82:	08 95       	ret
	case 'C':
	case 'c':
	DDRC=dir;
     b84:	64 bb       	out	0x14, r22	; 20
	break;
     b86:	08 95       	ret
	case  'D':
	case 'd':
	DDRD=dir;
     b88:	61 bb       	out	0x11, r22	; 17
     b8a:	08 95       	ret

00000b8c <dio_write_port>:
	
	}
}
void dio_write_port(char port,unsigned char val)
{
	switch(port)
     b8c:	84 34       	cpi	r24, 0x44	; 68
     b8e:	d9 f0       	breq	.+54     	; 0xbc6 <dio_write_port+0x3a>
     b90:	85 34       	cpi	r24, 0x45	; 69
     b92:	38 f4       	brcc	.+14     	; 0xba2 <dio_write_port+0x16>
     b94:	82 34       	cpi	r24, 0x42	; 66
     b96:	99 f0       	breq	.+38     	; 0xbbe <dio_write_port+0x32>
     b98:	83 34       	cpi	r24, 0x43	; 67
     b9a:	98 f4       	brcc	.+38     	; 0xbc2 <dio_write_port+0x36>
     b9c:	81 34       	cpi	r24, 0x41	; 65
     b9e:	a1 f4       	brne	.+40     	; 0xbc8 <dio_write_port+0x3c>
     ba0:	0c c0       	rjmp	.+24     	; 0xbba <dio_write_port+0x2e>
     ba2:	82 36       	cpi	r24, 0x62	; 98
     ba4:	61 f0       	breq	.+24     	; 0xbbe <dio_write_port+0x32>
     ba6:	83 36       	cpi	r24, 0x63	; 99
     ba8:	18 f4       	brcc	.+6      	; 0xbb0 <dio_write_port+0x24>
     baa:	81 36       	cpi	r24, 0x61	; 97
     bac:	69 f4       	brne	.+26     	; 0xbc8 <dio_write_port+0x3c>
     bae:	05 c0       	rjmp	.+10     	; 0xbba <dio_write_port+0x2e>
     bb0:	83 36       	cpi	r24, 0x63	; 99
     bb2:	39 f0       	breq	.+14     	; 0xbc2 <dio_write_port+0x36>
     bb4:	84 36       	cpi	r24, 0x64	; 100
     bb6:	41 f4       	brne	.+16     	; 0xbc8 <dio_write_port+0x3c>
     bb8:	06 c0       	rjmp	.+12     	; 0xbc6 <dio_write_port+0x3a>
	{
	case 'A':
	case 'a':
	PORTA=val;	
     bba:	6b bb       	out	0x1b, r22	; 27
	break;
     bbc:	08 95       	ret
	case 'B':
	case 'b':
	PORTB=val;
     bbe:	68 bb       	out	0x18, r22	; 24
	break;
     bc0:	08 95       	ret
	case 'C':
	case 'c':
	PORTC=val;
     bc2:	65 bb       	out	0x15, r22	; 21
	break;
     bc4:	08 95       	ret
	case 'D':
	case 'd':
	PORTD=val;
     bc6:	62 bb       	out	0x12, r22	; 18
     bc8:	08 95       	ret

00000bca <dio_read_port>:
	}
}
unsigned char dio_read_port(unsigned char port)
{
	unsigned char val;
	switch (port)
     bca:	84 34       	cpi	r24, 0x44	; 68
     bcc:	d9 f0       	breq	.+54     	; 0xc04 <dio_read_port+0x3a>
     bce:	85 34       	cpi	r24, 0x45	; 69
     bd0:	38 f4       	brcc	.+14     	; 0xbe0 <dio_read_port+0x16>
     bd2:	82 34       	cpi	r24, 0x42	; 66
     bd4:	99 f0       	breq	.+38     	; 0xbfc <dio_read_port+0x32>
     bd6:	83 34       	cpi	r24, 0x43	; 67
     bd8:	98 f4       	brcc	.+38     	; 0xc00 <dio_read_port+0x36>
     bda:	81 34       	cpi	r24, 0x41	; 65
     bdc:	a1 f4       	brne	.+40     	; 0xc06 <dio_read_port+0x3c>
     bde:	0c c0       	rjmp	.+24     	; 0xbf8 <dio_read_port+0x2e>
     be0:	82 36       	cpi	r24, 0x62	; 98
     be2:	61 f0       	breq	.+24     	; 0xbfc <dio_read_port+0x32>
     be4:	83 36       	cpi	r24, 0x63	; 99
     be6:	18 f4       	brcc	.+6      	; 0xbee <dio_read_port+0x24>
     be8:	81 36       	cpi	r24, 0x61	; 97
     bea:	69 f4       	brne	.+26     	; 0xc06 <dio_read_port+0x3c>
     bec:	05 c0       	rjmp	.+10     	; 0xbf8 <dio_read_port+0x2e>
     bee:	83 36       	cpi	r24, 0x63	; 99
     bf0:	39 f0       	breq	.+14     	; 0xc00 <dio_read_port+0x36>
     bf2:	84 36       	cpi	r24, 0x64	; 100
     bf4:	41 f4       	brne	.+16     	; 0xc06 <dio_read_port+0x3c>
     bf6:	06 c0       	rjmp	.+12     	; 0xc04 <dio_read_port+0x3a>
	{
	case 'a' :
	case 'A' :
	val=PINA;
     bf8:	89 b3       	in	r24, 0x19	; 25
	break;
     bfa:	08 95       	ret
	case 'B' :
	case 'b' :
	val=PINB;
     bfc:	86 b3       	in	r24, 0x16	; 22
	break;
     bfe:	08 95       	ret
	case 'C' :
	case 'c' :
	val=PINC;
     c00:	83 b3       	in	r24, 0x13	; 19
	break;
     c02:	08 95       	ret
	case 'D' :
	case 'd' :
	val=PIND;
     c04:	80 b3       	in	r24, 0x10	; 16
	default:
	break;
	
	}
	
}
     c06:	08 95       	ret

00000c08 <dio_toggle_port>:
void dio_toggle_port(char port)
{
		unsigned char val;
		switch (port)
     c08:	84 34       	cpi	r24, 0x44	; 68
     c0a:	09 f1       	breq	.+66     	; 0xc4e <dio_toggle_port+0x46>
     c0c:	85 34       	cpi	r24, 0x45	; 69
     c0e:	38 f4       	brcc	.+14     	; 0xc1e <dio_toggle_port+0x16>
     c10:	82 34       	cpi	r24, 0x42	; 66
     c12:	a9 f0       	breq	.+42     	; 0xc3e <dio_toggle_port+0x36>
     c14:	83 34       	cpi	r24, 0x43	; 67
     c16:	b8 f4       	brcc	.+46     	; 0xc46 <dio_toggle_port+0x3e>
     c18:	81 34       	cpi	r24, 0x41	; 65
     c1a:	e1 f4       	brne	.+56     	; 0xc54 <dio_toggle_port+0x4c>
     c1c:	0c c0       	rjmp	.+24     	; 0xc36 <dio_toggle_port+0x2e>
     c1e:	82 36       	cpi	r24, 0x62	; 98
     c20:	71 f0       	breq	.+28     	; 0xc3e <dio_toggle_port+0x36>
     c22:	83 36       	cpi	r24, 0x63	; 99
     c24:	18 f4       	brcc	.+6      	; 0xc2c <dio_toggle_port+0x24>
     c26:	81 36       	cpi	r24, 0x61	; 97
     c28:	a9 f4       	brne	.+42     	; 0xc54 <dio_toggle_port+0x4c>
     c2a:	05 c0       	rjmp	.+10     	; 0xc36 <dio_toggle_port+0x2e>
     c2c:	83 36       	cpi	r24, 0x63	; 99
     c2e:	59 f0       	breq	.+22     	; 0xc46 <dio_toggle_port+0x3e>
     c30:	84 36       	cpi	r24, 0x64	; 100
     c32:	81 f4       	brne	.+32     	; 0xc54 <dio_toggle_port+0x4c>
     c34:	0c c0       	rjmp	.+24     	; 0xc4e <dio_toggle_port+0x46>
		{
			case 'a' :
			case 'A' :
			PORTA=~PORTA;
     c36:	8b b3       	in	r24, 0x1b	; 27
     c38:	80 95       	com	r24
     c3a:	8b bb       	out	0x1b, r24	; 27
			break;
     c3c:	08 95       	ret
			case 'B' :
			case 'b' :
				PORTB=~PORTB;
     c3e:	88 b3       	in	r24, 0x18	; 24
     c40:	80 95       	com	r24
     c42:	88 bb       	out	0x18, r24	; 24
			break;
     c44:	08 95       	ret
			case 'C' :
			case 'c' :
				PORTC=~PORTC;
     c46:	85 b3       	in	r24, 0x15	; 21
     c48:	80 95       	com	r24
     c4a:	85 bb       	out	0x15, r24	; 21
			break;
     c4c:	08 95       	ret
			case 'D' :
			case 'd' :
		PORTD=~PORTD;
     c4e:	82 b3       	in	r24, 0x12	; 18
     c50:	80 95       	com	r24
     c52:	82 bb       	out	0x12, r24	; 18
     c54:	08 95       	ret

00000c56 <dio_pull_up_en>:
		}
}
void dio_pull_up_en (char port,char pin ,char en)
{
	
	switch(port)
     c56:	84 34       	cpi	r24, 0x44	; 68
     c58:	09 f4       	brne	.+2      	; 0xc5c <dio_pull_up_en+0x6>
     c5a:	80 c0       	rjmp	.+256    	; 0xd5c <dio_pull_up_en+0x106>
     c5c:	85 34       	cpi	r24, 0x45	; 69
     c5e:	48 f4       	brcc	.+18     	; 0xc72 <dio_pull_up_en+0x1c>
     c60:	82 34       	cpi	r24, 0x42	; 66
     c62:	c1 f1       	breq	.+112    	; 0xcd4 <dio_pull_up_en+0x7e>
     c64:	83 34       	cpi	r24, 0x43	; 67
     c66:	08 f0       	brcs	.+2      	; 0xc6a <dio_pull_up_en+0x14>
     c68:	57 c0       	rjmp	.+174    	; 0xd18 <dio_pull_up_en+0xc2>
     c6a:	81 34       	cpi	r24, 0x41	; 65
     c6c:	09 f0       	breq	.+2      	; 0xc70 <dio_pull_up_en+0x1a>
     c6e:	97 c0       	rjmp	.+302    	; 0xd9e <dio_pull_up_en+0x148>
     c70:	0f c0       	rjmp	.+30     	; 0xc90 <dio_pull_up_en+0x3a>
     c72:	82 36       	cpi	r24, 0x62	; 98
     c74:	79 f1       	breq	.+94     	; 0xcd4 <dio_pull_up_en+0x7e>
     c76:	83 36       	cpi	r24, 0x63	; 99
     c78:	20 f4       	brcc	.+8      	; 0xc82 <dio_pull_up_en+0x2c>
     c7a:	81 36       	cpi	r24, 0x61	; 97
     c7c:	09 f0       	breq	.+2      	; 0xc80 <dio_pull_up_en+0x2a>
     c7e:	8f c0       	rjmp	.+286    	; 0xd9e <dio_pull_up_en+0x148>
     c80:	07 c0       	rjmp	.+14     	; 0xc90 <dio_pull_up_en+0x3a>
     c82:	83 36       	cpi	r24, 0x63	; 99
     c84:	09 f4       	brne	.+2      	; 0xc88 <dio_pull_up_en+0x32>
     c86:	48 c0       	rjmp	.+144    	; 0xd18 <dio_pull_up_en+0xc2>
     c88:	84 36       	cpi	r24, 0x64	; 100
     c8a:	09 f0       	breq	.+2      	; 0xc8e <dio_pull_up_en+0x38>
     c8c:	88 c0       	rjmp	.+272    	; 0xd9e <dio_pull_up_en+0x148>
     c8e:	66 c0       	rjmp	.+204    	; 0xd5c <dio_pull_up_en+0x106>
{
	case 'a':
	case 'A':
if (en==1)
     c90:	41 30       	cpi	r20, 0x01	; 1
     c92:	91 f4       	brne	.+36     	; 0xcb8 <dio_pull_up_en+0x62>
{
PORTA=PORTA|(1<<pin);
     c94:	2b b3       	in	r18, 0x1b	; 27
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	ac 01       	movw	r20, r24
     c9c:	02 c0       	rjmp	.+4      	; 0xca2 <dio_pull_up_en+0x4c>
     c9e:	44 0f       	add	r20, r20
     ca0:	55 1f       	adc	r21, r21
     ca2:	6a 95       	dec	r22
     ca4:	e2 f7       	brpl	.-8      	; 0xc9e <dio_pull_up_en+0x48>
     ca6:	ba 01       	movw	r22, r20
     ca8:	82 2f       	mov	r24, r18
     caa:	84 2b       	or	r24, r20
     cac:	8b bb       	out	0x1b, r24	; 27
DDRA=DDRA&(~(1<<pin));
     cae:	8a b3       	in	r24, 0x1a	; 26
     cb0:	60 95       	com	r22
     cb2:	68 23       	and	r22, r24
     cb4:	6a bb       	out	0x1a, r22	; 26
     cb6:	08 95       	ret
}
else
{
	PORTA=PORTA&(~(1<<pin));
     cb8:	2b b3       	in	r18, 0x1b	; 27
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	ac 01       	movw	r20, r24
     cc0:	02 c0       	rjmp	.+4      	; 0xcc6 <dio_pull_up_en+0x70>
     cc2:	44 0f       	add	r20, r20
     cc4:	55 1f       	adc	r21, r21
     cc6:	6a 95       	dec	r22
     cc8:	e2 f7       	brpl	.-8      	; 0xcc2 <dio_pull_up_en+0x6c>
     cca:	ba 01       	movw	r22, r20
     ccc:	60 95       	com	r22
     cce:	62 23       	and	r22, r18
     cd0:	6b bb       	out	0x1b, r22	; 27
     cd2:	08 95       	ret
}break;
case 'b':
case 'B':
if (en==1)
     cd4:	41 30       	cpi	r20, 0x01	; 1
     cd6:	91 f4       	brne	.+36     	; 0xcfc <dio_pull_up_en+0xa6>
{
	PORTB=PORTB|(1<<pin);
     cd8:	28 b3       	in	r18, 0x18	; 24
     cda:	81 e0       	ldi	r24, 0x01	; 1
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	ac 01       	movw	r20, r24
     ce0:	02 c0       	rjmp	.+4      	; 0xce6 <dio_pull_up_en+0x90>
     ce2:	44 0f       	add	r20, r20
     ce4:	55 1f       	adc	r21, r21
     ce6:	6a 95       	dec	r22
     ce8:	e2 f7       	brpl	.-8      	; 0xce2 <dio_pull_up_en+0x8c>
     cea:	ba 01       	movw	r22, r20
     cec:	82 2f       	mov	r24, r18
     cee:	84 2b       	or	r24, r20
     cf0:	88 bb       	out	0x18, r24	; 24
	DDRB=DDRB&(~(1<<pin));
     cf2:	87 b3       	in	r24, 0x17	; 23
     cf4:	60 95       	com	r22
     cf6:	68 23       	and	r22, r24
     cf8:	67 bb       	out	0x17, r22	; 23
     cfa:	08 95       	ret
}
else
{
	PORTB=PORTB&(~(1<<pin));
     cfc:	28 b3       	in	r18, 0x18	; 24
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	ac 01       	movw	r20, r24
     d04:	02 c0       	rjmp	.+4      	; 0xd0a <dio_pull_up_en+0xb4>
     d06:	44 0f       	add	r20, r20
     d08:	55 1f       	adc	r21, r21
     d0a:	6a 95       	dec	r22
     d0c:	e2 f7       	brpl	.-8      	; 0xd06 <dio_pull_up_en+0xb0>
     d0e:	ba 01       	movw	r22, r20
     d10:	60 95       	com	r22
     d12:	62 23       	and	r22, r18
     d14:	68 bb       	out	0x18, r22	; 24
     d16:	08 95       	ret
}break;
case 'c':
case 'C':
if (en==1)
     d18:	41 30       	cpi	r20, 0x01	; 1
     d1a:	91 f4       	brne	.+36     	; 0xd40 <dio_pull_up_en+0xea>
{
	PORTC=PORTC|(1<<pin);
     d1c:	25 b3       	in	r18, 0x15	; 21
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	ac 01       	movw	r20, r24
     d24:	02 c0       	rjmp	.+4      	; 0xd2a <dio_pull_up_en+0xd4>
     d26:	44 0f       	add	r20, r20
     d28:	55 1f       	adc	r21, r21
     d2a:	6a 95       	dec	r22
     d2c:	e2 f7       	brpl	.-8      	; 0xd26 <dio_pull_up_en+0xd0>
     d2e:	ba 01       	movw	r22, r20
     d30:	82 2f       	mov	r24, r18
     d32:	84 2b       	or	r24, r20
     d34:	85 bb       	out	0x15, r24	; 21
	DDRC=DDRC&(~(1<<pin));
     d36:	84 b3       	in	r24, 0x14	; 20
     d38:	60 95       	com	r22
     d3a:	68 23       	and	r22, r24
     d3c:	64 bb       	out	0x14, r22	; 20
     d3e:	08 95       	ret
}
else
{
	PORTC=PORTC&(~(1<<pin));
     d40:	25 b3       	in	r18, 0x15	; 21
     d42:	81 e0       	ldi	r24, 0x01	; 1
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	ac 01       	movw	r20, r24
     d48:	02 c0       	rjmp	.+4      	; 0xd4e <dio_pull_up_en+0xf8>
     d4a:	44 0f       	add	r20, r20
     d4c:	55 1f       	adc	r21, r21
     d4e:	6a 95       	dec	r22
     d50:	e2 f7       	brpl	.-8      	; 0xd4a <dio_pull_up_en+0xf4>
     d52:	ba 01       	movw	r22, r20
     d54:	60 95       	com	r22
     d56:	62 23       	and	r22, r18
     d58:	65 bb       	out	0x15, r22	; 21
     d5a:	08 95       	ret
}break;
case 'd':
case 'D':
if (en==1)
     d5c:	41 30       	cpi	r20, 0x01	; 1
     d5e:	91 f4       	brne	.+36     	; 0xd84 <dio_pull_up_en+0x12e>
{
	PORTD=PORTD|(1<<pin);
     d60:	22 b3       	in	r18, 0x12	; 18
     d62:	81 e0       	ldi	r24, 0x01	; 1
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	ac 01       	movw	r20, r24
     d68:	02 c0       	rjmp	.+4      	; 0xd6e <dio_pull_up_en+0x118>
     d6a:	44 0f       	add	r20, r20
     d6c:	55 1f       	adc	r21, r21
     d6e:	6a 95       	dec	r22
     d70:	e2 f7       	brpl	.-8      	; 0xd6a <dio_pull_up_en+0x114>
     d72:	ba 01       	movw	r22, r20
     d74:	82 2f       	mov	r24, r18
     d76:	84 2b       	or	r24, r20
     d78:	82 bb       	out	0x12, r24	; 18
	DDRD=DDRD&(~(1<<pin));
     d7a:	81 b3       	in	r24, 0x11	; 17
     d7c:	60 95       	com	r22
     d7e:	68 23       	and	r22, r24
     d80:	61 bb       	out	0x11, r22	; 17
     d82:	08 95       	ret
}
else
{
	PORTD=PORTD&(~(1<<pin));
     d84:	22 b3       	in	r18, 0x12	; 18
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	ac 01       	movw	r20, r24
     d8c:	02 c0       	rjmp	.+4      	; 0xd92 <dio_pull_up_en+0x13c>
     d8e:	44 0f       	add	r20, r20
     d90:	55 1f       	adc	r21, r21
     d92:	6a 95       	dec	r22
     d94:	e2 f7       	brpl	.-8      	; 0xd8e <dio_pull_up_en+0x138>
     d96:	ba 01       	movw	r22, r20
     d98:	60 95       	com	r22
     d9a:	62 23       	and	r22, r18
     d9c:	62 bb       	out	0x12, r22	; 18
     d9e:	08 95       	ret

00000da0 <dio_write_lo_level>:
break;
}
}
void dio_write_lo_level(char port,unsigned char val)
{
	val=val & 0x0f;
     da0:	6f 70       	andi	r22, 0x0F	; 15
	switch(port)
     da2:	84 34       	cpi	r24, 0x44	; 68
     da4:	51 f1       	breq	.+84     	; 0xdfa <dio_write_lo_level+0x5a>
     da6:	85 34       	cpi	r24, 0x45	; 69
     da8:	38 f4       	brcc	.+14     	; 0xdb8 <dio_write_lo_level+0x18>
     daa:	82 34       	cpi	r24, 0x42	; 66
     dac:	c1 f0       	breq	.+48     	; 0xdde <dio_write_lo_level+0x3e>
     dae:	83 34       	cpi	r24, 0x43	; 67
     db0:	e8 f4       	brcc	.+58     	; 0xdec <dio_write_lo_level+0x4c>
     db2:	81 34       	cpi	r24, 0x41	; 65
     db4:	41 f5       	brne	.+80     	; 0xe06 <dio_write_lo_level+0x66>
     db6:	0c c0       	rjmp	.+24     	; 0xdd0 <dio_write_lo_level+0x30>
     db8:	82 36       	cpi	r24, 0x62	; 98
     dba:	89 f0       	breq	.+34     	; 0xdde <dio_write_lo_level+0x3e>
     dbc:	83 36       	cpi	r24, 0x63	; 99
     dbe:	18 f4       	brcc	.+6      	; 0xdc6 <dio_write_lo_level+0x26>
     dc0:	81 36       	cpi	r24, 0x61	; 97
     dc2:	09 f5       	brne	.+66     	; 0xe06 <dio_write_lo_level+0x66>
     dc4:	05 c0       	rjmp	.+10     	; 0xdd0 <dio_write_lo_level+0x30>
     dc6:	83 36       	cpi	r24, 0x63	; 99
     dc8:	89 f0       	breq	.+34     	; 0xdec <dio_write_lo_level+0x4c>
     dca:	84 36       	cpi	r24, 0x64	; 100
     dcc:	e1 f4       	brne	.+56     	; 0xe06 <dio_write_lo_level+0x66>
     dce:	15 c0       	rjmp	.+42     	; 0xdfa <dio_write_lo_level+0x5a>
	{
		case 'a':
		case 'A':
		PORTA=PORTA& 0xf0;
     dd0:	8b b3       	in	r24, 0x1b	; 27
     dd2:	80 7f       	andi	r24, 0xF0	; 240
     dd4:	8b bb       	out	0x1b, r24	; 27
		PORTA=PORTA|val;
     dd6:	8b b3       	in	r24, 0x1b	; 27
     dd8:	68 2b       	or	r22, r24
     dda:	6b bb       	out	0x1b, r22	; 27
		break;
     ddc:	08 95       	ret
		case 'b':
		case 'B':
		PORTB=PORTB& 0xf0;
     dde:	88 b3       	in	r24, 0x18	; 24
     de0:	80 7f       	andi	r24, 0xF0	; 240
     de2:	88 bb       	out	0x18, r24	; 24
		PORTB=PORTB|val;
     de4:	88 b3       	in	r24, 0x18	; 24
     de6:	68 2b       	or	r22, r24
     de8:	68 bb       	out	0x18, r22	; 24
		break;
     dea:	08 95       	ret
		case 'c':
		case 'C':
		PORTC=PORTC& 0xf0;
     dec:	85 b3       	in	r24, 0x15	; 21
     dee:	80 7f       	andi	r24, 0xF0	; 240
     df0:	85 bb       	out	0x15, r24	; 21
		PORTC=PORTC|val;
     df2:	85 b3       	in	r24, 0x15	; 21
     df4:	68 2b       	or	r22, r24
     df6:	65 bb       	out	0x15, r22	; 21
		break;
     df8:	08 95       	ret
		case 'd':
		case 'D':
		PORTD=PORTD& 0xf0;
     dfa:	82 b3       	in	r24, 0x12	; 18
     dfc:	80 7f       	andi	r24, 0xF0	; 240
     dfe:	82 bb       	out	0x12, r24	; 18
		PORTD=PORTD|val;
     e00:	82 b3       	in	r24, 0x12	; 18
     e02:	68 2b       	or	r22, r24
     e04:	62 bb       	out	0x12, r22	; 18
     e06:	08 95       	ret

00000e08 <dio_write_hi_level>:

}
void dio_write_hi_level(char port,unsigned char val)
{
	val =val <<4;
	val=val & 0xf0;
     e08:	62 95       	swap	r22
     e0a:	60 7f       	andi	r22, 0xF0	; 240
	switch(port)
     e0c:	84 34       	cpi	r24, 0x44	; 68
     e0e:	51 f1       	breq	.+84     	; 0xe64 <dio_write_hi_level+0x5c>
     e10:	85 34       	cpi	r24, 0x45	; 69
     e12:	38 f4       	brcc	.+14     	; 0xe22 <dio_write_hi_level+0x1a>
     e14:	82 34       	cpi	r24, 0x42	; 66
     e16:	c1 f0       	breq	.+48     	; 0xe48 <dio_write_hi_level+0x40>
     e18:	83 34       	cpi	r24, 0x43	; 67
     e1a:	e8 f4       	brcc	.+58     	; 0xe56 <dio_write_hi_level+0x4e>
     e1c:	81 34       	cpi	r24, 0x41	; 65
     e1e:	41 f5       	brne	.+80     	; 0xe70 <dio_write_hi_level+0x68>
     e20:	0c c0       	rjmp	.+24     	; 0xe3a <dio_write_hi_level+0x32>
     e22:	82 36       	cpi	r24, 0x62	; 98
     e24:	89 f0       	breq	.+34     	; 0xe48 <dio_write_hi_level+0x40>
     e26:	83 36       	cpi	r24, 0x63	; 99
     e28:	18 f4       	brcc	.+6      	; 0xe30 <dio_write_hi_level+0x28>
     e2a:	81 36       	cpi	r24, 0x61	; 97
     e2c:	09 f5       	brne	.+66     	; 0xe70 <dio_write_hi_level+0x68>
     e2e:	05 c0       	rjmp	.+10     	; 0xe3a <dio_write_hi_level+0x32>
     e30:	83 36       	cpi	r24, 0x63	; 99
     e32:	89 f0       	breq	.+34     	; 0xe56 <dio_write_hi_level+0x4e>
     e34:	84 36       	cpi	r24, 0x64	; 100
     e36:	e1 f4       	brne	.+56     	; 0xe70 <dio_write_hi_level+0x68>
     e38:	15 c0       	rjmp	.+42     	; 0xe64 <dio_write_hi_level+0x5c>
	{
		case 'a':
		case 'A':
		PORTA=PORTA& 0x0f;
     e3a:	8b b3       	in	r24, 0x1b	; 27
     e3c:	8f 70       	andi	r24, 0x0F	; 15
     e3e:	8b bb       	out	0x1b, r24	; 27
		PORTA=PORTA|val;
     e40:	8b b3       	in	r24, 0x1b	; 27
     e42:	68 2b       	or	r22, r24
     e44:	6b bb       	out	0x1b, r22	; 27
		break;
     e46:	08 95       	ret
		case 'b':
		case 'B':
		PORTB=PORTB& 0x0f;
     e48:	88 b3       	in	r24, 0x18	; 24
     e4a:	8f 70       	andi	r24, 0x0F	; 15
     e4c:	88 bb       	out	0x18, r24	; 24
		PORTB=PORTB|val;
     e4e:	88 b3       	in	r24, 0x18	; 24
     e50:	68 2b       	or	r22, r24
     e52:	68 bb       	out	0x18, r22	; 24
		break;
     e54:	08 95       	ret
		case 'c':
		case 'C':
		PORTC=PORTC& 0x0f;
     e56:	85 b3       	in	r24, 0x15	; 21
     e58:	8f 70       	andi	r24, 0x0F	; 15
     e5a:	85 bb       	out	0x15, r24	; 21
		PORTC=PORTC|val;
     e5c:	85 b3       	in	r24, 0x15	; 21
     e5e:	68 2b       	or	r22, r24
     e60:	65 bb       	out	0x15, r22	; 21
		break;
     e62:	08 95       	ret
		case 'd':
		case 'D':
		PORTD=PORTD& 0x0f;
     e64:	82 b3       	in	r24, 0x12	; 18
     e66:	8f 70       	andi	r24, 0x0F	; 15
     e68:	82 bb       	out	0x12, r24	; 18
		PORTD=PORTD|val;
     e6a:	82 b3       	in	r24, 0x12	; 18
     e6c:	68 2b       	or	r22, r24
     e6e:	62 bb       	out	0x12, r22	; 18
     e70:	08 95       	ret

00000e72 <ret_keypad>:
 */ 
#include "prog init.h"
#include <math.h>
unsigned char flag=0;//flag for keypad latch
char ret_keypad(void)
{
     e72:	cf 93       	push	r28
unsigned  char x=oo;
do 
{

x=keypad_read('c');
     e74:	83 e6       	ldi	r24, 0x63	; 99
     e76:	0e 94 cd 07 	call	0xf9a	; 0xf9a <keypad_read>
     e7a:	c8 2f       	mov	r28, r24
{
	flag=0;
}                                                          */
/************************************************************************/
	
} while (x==oo);
     e7c:	8f 3f       	cpi	r24, 0xFF	; 255
     e7e:	d1 f3       	breq	.-12     	; 0xe74 <ret_keypad+0x2>
lcd_send_char(x);
     e80:	0e 94 de 08 	call	0x11bc	; 0x11bc <lcd_send_char>
return x;
     e84:	8c 2f       	mov	r24, r28
     e86:	cf 91       	pop	r28
     e88:	08 95       	ret

00000e8a <tostring>:
 *
 * Created: 12/07/2023 12:05:43 م
 *  Author: handsa
 */ 
void tostring(char str[],int c) // char str[] is pointer to char
{
     e8a:	cf 92       	push	r12
     e8c:	df 92       	push	r13
     e8e:	ef 92       	push	r14
     e90:	ff 92       	push	r15
     e92:	0f 93       	push	r16
     e94:	1f 93       	push	r17
     e96:	cf 93       	push	r28
     e98:	df 93       	push	r29
     e9a:	6c 01       	movw	r12, r24
     e9c:	fb 01       	movw	r30, r22
	int i,rem,len=0;
	int n;
	n=c;
	if (n!=0)
     e9e:	30 97       	sbiw	r30, 0x00	; 0
     ea0:	61 f1       	breq	.+88     	; 0xefa <tostring+0x70>
     ea2:	cb 01       	movw	r24, r22
     ea4:	c0 e0       	ldi	r28, 0x00	; 0
     ea6:	d0 e0       	ldi	r29, 0x00	; 0
	{
	while(n!=0)
	{
		len++;
		n/=10;
     ea8:	2a e0       	ldi	r18, 0x0A	; 10
     eaa:	30 e0       	ldi	r19, 0x00	; 0
	n=c;
	if (n!=0)
	{
	while(n!=0)
	{
		len++;
     eac:	21 96       	adiw	r28, 0x01	; 1
		n/=10;
     eae:	b9 01       	movw	r22, r18
     eb0:	0e 94 8b 0a 	call	0x1516	; 0x1516 <__divmodhi4>
     eb4:	cb 01       	movw	r24, r22
	int i,rem,len=0;
	int n;
	n=c;
	if (n!=0)
	{
	while(n!=0)
     eb6:	00 97       	sbiw	r24, 0x00	; 0
     eb8:	c9 f7       	brne	.-14     	; 0xeac <tostring+0x22>
	{
		len++;
		n/=10;
	}
	
	for(i=0;i<len;i++)
     eba:	1c 16       	cp	r1, r28
     ebc:	1d 06       	cpc	r1, r29
     ebe:	cc f4       	brge	.+50     	; 0xef2 <tostring+0x68>
 * int_to_string1.c
 *
 * Created: 12/07/2023 12:05:43 م
 *  Author: handsa
 */ 
void tostring(char str[],int c) // char str[] is pointer to char
     ec0:	86 01       	movw	r16, r12
     ec2:	0c 0f       	add	r16, r28
     ec4:	1d 1f       	adc	r17, r29
     ec6:	20 e0       	ldi	r18, 0x00	; 0
     ec8:	30 e0       	ldi	r19, 0x00	; 0
		n/=10;
	}
	
	for(i=0;i<len;i++)
	{
		rem=c%10;
     eca:	0f 2e       	mov	r0, r31
     ecc:	fa e0       	ldi	r31, 0x0A	; 10
     ece:	ef 2e       	mov	r14, r31
     ed0:	ff 24       	eor	r15, r15
     ed2:	f0 2d       	mov	r31, r0
     ed4:	cf 01       	movw	r24, r30
     ed6:	b7 01       	movw	r22, r14
     ed8:	0e 94 8b 0a 	call	0x1516	; 0x1516 <__divmodhi4>
		c=c/10;
     edc:	e6 2f       	mov	r30, r22
     ede:	f7 2f       	mov	r31, r23
		str[len-(i+1)]=rem+'0';//add ascii code of '0'(48)to every digit to get its ascii code
     ee0:	80 5d       	subi	r24, 0xD0	; 208
     ee2:	d8 01       	movw	r26, r16
     ee4:	8e 93       	st	-X, r24
     ee6:	8d 01       	movw	r16, r26
	{
		len++;
		n/=10;
	}
	
	for(i=0;i<len;i++)
     ee8:	2f 5f       	subi	r18, 0xFF	; 255
     eea:	3f 4f       	sbci	r19, 0xFF	; 255
     eec:	2c 17       	cp	r18, r28
     eee:	3d 07       	cpc	r19, r29
     ef0:	89 f7       	brne	.-30     	; 0xed4 <tostring+0x4a>
		rem=c%10;
		c=c/10;
		str[len-(i+1)]=rem+'0';//add ascii code of '0'(48)to every digit to get its ascii code
	}
	
	str[len]='\0';
     ef2:	cc 0d       	add	r28, r12
     ef4:	dd 1d       	adc	r29, r13
     ef6:	18 82       	st	Y, r1
     ef8:	04 c0       	rjmp	.+8      	; 0xf02 <tostring+0x78>
	}
	else
	{
	str[0]='0';
     efa:	80 e3       	ldi	r24, 0x30	; 48
     efc:	f6 01       	movw	r30, r12
     efe:	80 83       	st	Z, r24
	str[1]='\0'	;
     f00:	11 82       	std	Z+1, r1	; 0x01
	}

     f02:	df 91       	pop	r29
     f04:	cf 91       	pop	r28
     f06:	1f 91       	pop	r17
     f08:	0f 91       	pop	r16
     f0a:	ff 90       	pop	r15
     f0c:	ef 90       	pop	r14
     f0e:	df 90       	pop	r13
     f10:	cf 90       	pop	r12
     f12:	08 95       	ret

00000f14 <keypad_init>:

#include "keyPad_drives.h"


void keypad_init(unsigned char port)
{
     f14:	cf 93       	push	r28
     f16:	c8 2f       	mov	r28, r24
	dio_set_pin(port,0,1);
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	60 e0       	ldi	r22, 0x00	; 0
     f1c:	70 e0       	ldi	r23, 0x00	; 0
     f1e:	41 e0       	ldi	r20, 0x01	; 1
     f20:	50 e0       	ldi	r21, 0x00	; 0
     f22:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <dio_set_pin>
	dio_set_pin(port,1,1);
     f26:	8c 2f       	mov	r24, r28
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	61 e0       	ldi	r22, 0x01	; 1
     f2c:	70 e0       	ldi	r23, 0x00	; 0
     f2e:	41 e0       	ldi	r20, 0x01	; 1
     f30:	50 e0       	ldi	r21, 0x00	; 0
     f32:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <dio_set_pin>
    dio_set_pin(port,2,1);
     f36:	8c 2f       	mov	r24, r28
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	62 e0       	ldi	r22, 0x02	; 2
     f3c:	70 e0       	ldi	r23, 0x00	; 0
     f3e:	41 e0       	ldi	r20, 0x01	; 1
     f40:	50 e0       	ldi	r21, 0x00	; 0
     f42:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <dio_set_pin>
    dio_set_pin(port,3,1);
     f46:	8c 2f       	mov	r24, r28
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	63 e0       	ldi	r22, 0x03	; 3
     f4c:	70 e0       	ldi	r23, 0x00	; 0
     f4e:	41 e0       	ldi	r20, 0x01	; 1
     f50:	50 e0       	ldi	r21, 0x00	; 0
     f52:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <dio_set_pin>
    dio_pull_up_en(port,4,1);
     f56:	8c 2f       	mov	r24, r28
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	64 e0       	ldi	r22, 0x04	; 4
     f5c:	70 e0       	ldi	r23, 0x00	; 0
     f5e:	41 e0       	ldi	r20, 0x01	; 1
     f60:	50 e0       	ldi	r21, 0x00	; 0
     f62:	0e 94 2b 06 	call	0xc56	; 0xc56 <dio_pull_up_en>
    dio_pull_up_en(port,5,1);
     f66:	8c 2f       	mov	r24, r28
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	65 e0       	ldi	r22, 0x05	; 5
     f6c:	70 e0       	ldi	r23, 0x00	; 0
     f6e:	41 e0       	ldi	r20, 0x01	; 1
     f70:	50 e0       	ldi	r21, 0x00	; 0
     f72:	0e 94 2b 06 	call	0xc56	; 0xc56 <dio_pull_up_en>
     dio_pull_up_en(port,6,1);
     f76:	8c 2f       	mov	r24, r28
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	66 e0       	ldi	r22, 0x06	; 6
     f7c:	70 e0       	ldi	r23, 0x00	; 0
     f7e:	41 e0       	ldi	r20, 0x01	; 1
     f80:	50 e0       	ldi	r21, 0x00	; 0
     f82:	0e 94 2b 06 	call	0xc56	; 0xc56 <dio_pull_up_en>
	  dio_pull_up_en(port,7,1);
     f86:	8c 2f       	mov	r24, r28
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	67 e0       	ldi	r22, 0x07	; 7
     f8c:	70 e0       	ldi	r23, 0x00	; 0
     f8e:	41 e0       	ldi	r20, 0x01	; 1
     f90:	50 e0       	ldi	r21, 0x00	; 0
     f92:	0e 94 2b 06 	call	0xc56	; 0xc56 <dio_pull_up_en>

}
     f96:	cf 91       	pop	r28
     f98:	08 95       	ret

00000f9a <keypad_read>:
unsigned char keypad_read(unsigned char port)
{
     f9a:	8f 92       	push	r8
     f9c:	9f 92       	push	r9
     f9e:	af 92       	push	r10
     fa0:	bf 92       	push	r11
     fa2:	cf 92       	push	r12
     fa4:	df 92       	push	r13
     fa6:	ef 92       	push	r14
     fa8:	ff 92       	push	r15
     faa:	0f 93       	push	r16
     fac:	1f 93       	push	r17
     fae:	cf 93       	push	r28
     fb0:	df 93       	push	r29
     fb2:	cd b7       	in	r28, 0x3d	; 61
     fb4:	de b7       	in	r29, 0x3e	; 62
     fb6:	61 97       	sbiw	r28, 0x11	; 17
     fb8:	0f b6       	in	r0, 0x3f	; 63
     fba:	f8 94       	cli
     fbc:	de bf       	out	0x3e, r29	; 62
     fbe:	0f be       	out	0x3f, r0	; 63
     fc0:	cd bf       	out	0x3d, r28	; 61
	unsigned char arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
     fc2:	de 01       	movw	r26, r28
     fc4:	11 96       	adiw	r26, 0x01	; 1
     fc6:	eb e9       	ldi	r30, 0x9B	; 155
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	90 e1       	ldi	r25, 0x10	; 16
     fcc:	01 90       	ld	r0, Z+
     fce:	0d 92       	st	X+, r0
     fd0:	91 50       	subi	r25, 0x01	; 1
     fd2:	e1 f7       	brne	.-8      	; 0xfcc <keypad_read+0x32>
	unsigned char raw ,col,x;
volatile		unsigned char ret=0xff;
     fd4:	9f ef       	ldi	r25, 0xFF	; 255
     fd6:	99 8b       	std	Y+17, r25	; 0x11
     fd8:	cc 24       	eor	r12, r12
     fda:	dd 24       	eor	r13, r13
		
		for (raw=0;raw<=3;raw++)
		{
		dio_write_pin(port,0,1);
     fdc:	f8 2e       	mov	r15, r24
     fde:	ee 24       	eor	r14, r14
     fe0:	8f 2d       	mov	r24, r15
     fe2:	9e 2d       	mov	r25, r14
     fe4:	60 e0       	ldi	r22, 0x00	; 0
     fe6:	70 e0       	ldi	r23, 0x00	; 0
     fe8:	41 e0       	ldi	r20, 0x01	; 1
     fea:	50 e0       	ldi	r21, 0x00	; 0
     fec:	0e 94 85 04 	call	0x90a	; 0x90a <dio_write_pin>
		dio_write_pin(port,1,1);
     ff0:	8f 2d       	mov	r24, r15
     ff2:	9e 2d       	mov	r25, r14
     ff4:	61 e0       	ldi	r22, 0x01	; 1
     ff6:	70 e0       	ldi	r23, 0x00	; 0
     ff8:	41 e0       	ldi	r20, 0x01	; 1
     ffa:	50 e0       	ldi	r21, 0x00	; 0
     ffc:	0e 94 85 04 	call	0x90a	; 0x90a <dio_write_pin>
		dio_write_pin(port,2,1);
    1000:	8f 2d       	mov	r24, r15
    1002:	9e 2d       	mov	r25, r14
    1004:	62 e0       	ldi	r22, 0x02	; 2
    1006:	70 e0       	ldi	r23, 0x00	; 0
    1008:	41 e0       	ldi	r20, 0x01	; 1
    100a:	50 e0       	ldi	r21, 0x00	; 0
    100c:	0e 94 85 04 	call	0x90a	; 0x90a <dio_write_pin>
		dio_write_pin(port,3,1);
    1010:	8f 2d       	mov	r24, r15
    1012:	9e 2d       	mov	r25, r14
    1014:	63 e0       	ldi	r22, 0x03	; 3
    1016:	70 e0       	ldi	r23, 0x00	; 0
    1018:	41 e0       	ldi	r20, 0x01	; 1
    101a:	50 e0       	ldi	r21, 0x00	; 0
    101c:	0e 94 85 04 	call	0x90a	; 0x90a <dio_write_pin>
		dio_write_pin(port,raw,0);
    1020:	46 01       	movw	r8, r12
    1022:	8f 2d       	mov	r24, r15
    1024:	9e 2d       	mov	r25, r14
    1026:	b6 01       	movw	r22, r12
    1028:	40 e0       	ldi	r20, 0x00	; 0
    102a:	50 e0       	ldi	r21, 0x00	; 0
    102c:	0e 94 85 04 	call	0x90a	; 0x90a <dio_write_pin>
    1030:	00 e0       	ldi	r16, 0x00	; 0
    1032:	10 e0       	ldi	r17, 0x00	; 0
		
		for(col=0;col<=3;col++)
		{
	
			x=dio_read_pin(port,col+4);
    1034:	58 01       	movw	r10, r16
    dio_pull_up_en(port,5,1);
     dio_pull_up_en(port,6,1);
	  dio_pull_up_en(port,7,1);

}
unsigned char keypad_read(unsigned char port)
    1036:	b8 01       	movw	r22, r16
    1038:	6c 5f       	subi	r22, 0xFC	; 252
    103a:	7f 4f       	sbci	r23, 0xFF	; 255
		dio_write_pin(port,raw,0);
		
		for(col=0;col<=3;col++)
		{
	
			x=dio_read_pin(port,col+4);
    103c:	8f 2d       	mov	r24, r15
    103e:	9e 2d       	mov	r25, r14
    1040:	0e 94 16 05 	call	0xa2c	; 0xa2c <dio_read_pin>
			
			if ((x==0))
    1044:	88 23       	and	r24, r24
    1046:	69 f4       	brne	.+26     	; 0x1062 <keypad_read+0xc8>
			{
			ret=arr[raw][col];
    1048:	f4 01       	movw	r30, r8
    104a:	ee 0f       	add	r30, r30
    104c:	ff 1f       	adc	r31, r31
    104e:	ee 0f       	add	r30, r30
    1050:	ff 1f       	adc	r31, r31
    1052:	ae 0e       	add	r10, r30
    1054:	bf 1e       	adc	r11, r31
    1056:	fe 01       	movw	r30, r28
    1058:	ea 0d       	add	r30, r10
    105a:	fb 1d       	adc	r31, r11
    105c:	81 81       	ldd	r24, Z+1	; 0x01
    105e:	89 8b       	std	Y+17, r24	; 0x11
    1060:	06 c0       	rjmp	.+12     	; 0x106e <keypad_read+0xd4>
    1062:	0f 5f       	subi	r16, 0xFF	; 255
    1064:	1f 4f       	sbci	r17, 0xFF	; 255
		dio_write_pin(port,1,1);
		dio_write_pin(port,2,1);
		dio_write_pin(port,3,1);
		dio_write_pin(port,raw,0);
		
		for(col=0;col<=3;col++)
    1066:	04 30       	cpi	r16, 0x04	; 4
    1068:	11 05       	cpc	r17, r1
    106a:	21 f7       	brne	.-56     	; 0x1034 <keypad_read+0x9a>
    106c:	14 c0       	rjmp	.+40     	; 0x1096 <keypad_read+0xfc>
		

		}


return ret;
    106e:	89 89       	ldd	r24, Y+17	; 0x11

}
    1070:	61 96       	adiw	r28, 0x11	; 17
    1072:	0f b6       	in	r0, 0x3f	; 63
    1074:	f8 94       	cli
    1076:	de bf       	out	0x3e, r29	; 62
    1078:	0f be       	out	0x3f, r0	; 63
    107a:	cd bf       	out	0x3d, r28	; 61
    107c:	df 91       	pop	r29
    107e:	cf 91       	pop	r28
    1080:	1f 91       	pop	r17
    1082:	0f 91       	pop	r16
    1084:	ff 90       	pop	r15
    1086:	ef 90       	pop	r14
    1088:	df 90       	pop	r13
    108a:	cf 90       	pop	r12
    108c:	bf 90       	pop	r11
    108e:	af 90       	pop	r10
    1090:	9f 90       	pop	r9
    1092:	8f 90       	pop	r8
    1094:	08 95       	ret
		

		}


return ret;
    1096:	08 94       	sec
    1098:	c1 1c       	adc	r12, r1
    109a:	d1 1c       	adc	r13, r1
{
	unsigned char arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
	unsigned char raw ,col,x;
volatile		unsigned char ret=0xff;
		
		for (raw=0;raw<=3;raw++)
    109c:	84 e0       	ldi	r24, 0x04	; 4
    109e:	c8 16       	cp	r12, r24
    10a0:	d1 04       	cpc	r13, r1
    10a2:	09 f0       	breq	.+2      	; 0x10a6 <keypad_read+0x10c>
    10a4:	9d cf       	rjmp	.-198    	; 0xfe0 <keypad_read+0x46>
    10a6:	e3 cf       	rjmp	.-58     	; 0x106e <keypad_read+0xd4>

000010a8 <pulse>:

#endif
}
static void pulse(void)
{
	dio_write_pin(st2,en,1);
    10a8:	82 e4       	ldi	r24, 0x42	; 66
    10aa:	60 e0       	ldi	r22, 0x00	; 0
    10ac:	41 e0       	ldi	r20, 0x01	; 1
    10ae:	0e 94 85 04 	call	0x90a	; 0x90a <dio_write_pin>
    10b2:	8f e9       	ldi	r24, 0x9F	; 159
    10b4:	9f e0       	ldi	r25, 0x0F	; 15
    10b6:	01 97       	sbiw	r24, 0x01	; 1
    10b8:	f1 f7       	brne	.-4      	; 0x10b6 <pulse+0xe>
    10ba:	00 c0       	rjmp	.+0      	; 0x10bc <pulse+0x14>
    10bc:	00 00       	nop
	dm(2);
		dio_write_pin(st2,en,0);
    10be:	82 e4       	ldi	r24, 0x42	; 66
    10c0:	60 e0       	ldi	r22, 0x00	; 0
    10c2:	40 e0       	ldi	r20, 0x00	; 0
    10c4:	0e 94 85 04 	call	0x90a	; 0x90a <dio_write_pin>
    10c8:	8f e9       	ldi	r24, 0x9F	; 159
    10ca:	9f e0       	ldi	r25, 0x0F	; 15
    10cc:	01 97       	sbiw	r24, 0x01	; 1
    10ce:	f1 f7       	brne	.-4      	; 0x10cc <pulse+0x24>
    10d0:	00 c0       	rjmp	.+0      	; 0x10d2 <pulse+0x2a>
    10d2:	00 00       	nop
			dm(2);
}
    10d4:	08 95       	ret

000010d6 <lcd_send_cmd>:
void lcd_send_cmd(char data)
{
    10d6:	cf 93       	push	r28
    10d8:	c8 2f       	mov	r28, r24
	dio_write_port(st1,data);
	dio_write_pin(st2,rs,0);
	pulse();
	dm(1);
#elif defined four_bits_mode
dio_write_lo_level(st1,data>>4);
    10da:	68 2f       	mov	r22, r24
    10dc:	62 95       	swap	r22
    10de:	6f 70       	andi	r22, 0x0F	; 15
    10e0:	81 e4       	ldi	r24, 0x41	; 65
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	70 e0       	ldi	r23, 0x00	; 0
    10e6:	0e 94 d0 06 	call	0xda0	; 0xda0 <dio_write_lo_level>
dio_write_pin(st2,rs,0);
    10ea:	82 e4       	ldi	r24, 0x42	; 66
    10ec:	61 e0       	ldi	r22, 0x01	; 1
    10ee:	40 e0       	ldi	r20, 0x00	; 0
    10f0:	0e 94 85 04 	call	0x90a	; 0x90a <dio_write_pin>
pulse();
    10f4:	0e 94 54 08 	call	0x10a8	; 0x10a8 <pulse>
    10f8:	8f ec       	ldi	r24, 0xCF	; 207
    10fa:	97 e0       	ldi	r25, 0x07	; 7
    10fc:	01 97       	sbiw	r24, 0x01	; 1
    10fe:	f1 f7       	brne	.-4      	; 0x10fc <lcd_send_cmd+0x26>
    1100:	00 c0       	rjmp	.+0      	; 0x1102 <lcd_send_cmd+0x2c>
    1102:	00 00       	nop
dm(1);
dio_write_lo_level(st1,data);
    1104:	81 e4       	ldi	r24, 0x41	; 65
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	6c 2f       	mov	r22, r28
    110a:	70 e0       	ldi	r23, 0x00	; 0
    110c:	0e 94 d0 06 	call	0xda0	; 0xda0 <dio_write_lo_level>
pulse();
    1110:	0e 94 54 08 	call	0x10a8	; 0x10a8 <pulse>
    1114:	8f ec       	ldi	r24, 0xCF	; 207
    1116:	97 e0       	ldi	r25, 0x07	; 7
    1118:	01 97       	sbiw	r24, 0x01	; 1
    111a:	f1 f7       	brne	.-4      	; 0x1118 <lcd_send_cmd+0x42>
    111c:	00 c0       	rjmp	.+0      	; 0x111e <lcd_send_cmd+0x48>
    111e:	00 00       	nop
dm(1);
#endif
}
    1120:	cf 91       	pop	r28
    1122:	08 95       	ret

00001124 <lcd_init>:
		//lcd_send_cmd(0x04);
lcd_send_cmd(entry_mode);
	dm(1);

#elif defined four_bits_mode
dio_set_pin(st1,0,1);
    1124:	81 e4       	ldi	r24, 0x41	; 65
    1126:	60 e0       	ldi	r22, 0x00	; 0
    1128:	41 e0       	ldi	r20, 0x01	; 1
    112a:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <dio_set_pin>
dio_set_pin(st1,1,1);
    112e:	81 e4       	ldi	r24, 0x41	; 65
    1130:	61 e0       	ldi	r22, 0x01	; 1
    1132:	41 e0       	ldi	r20, 0x01	; 1
    1134:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <dio_set_pin>
dio_set_pin(st1,2,1);
    1138:	81 e4       	ldi	r24, 0x41	; 65
    113a:	62 e0       	ldi	r22, 0x02	; 2
    113c:	41 e0       	ldi	r20, 0x01	; 1
    113e:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <dio_set_pin>
dio_set_pin(st1,3,1);
    1142:	81 e4       	ldi	r24, 0x41	; 65
    1144:	63 e0       	ldi	r22, 0x03	; 3
    1146:	41 e0       	ldi	r20, 0x01	; 1
    1148:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <dio_set_pin>
dio_set_pin(st2,en,1);
    114c:	82 e4       	ldi	r24, 0x42	; 66
    114e:	60 e0       	ldi	r22, 0x00	; 0
    1150:	41 e0       	ldi	r20, 0x01	; 1
    1152:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <dio_set_pin>
dio_set_pin(st2,rs,1);
    1156:	82 e4       	ldi	r24, 0x42	; 66
    1158:	61 e0       	ldi	r22, 0x01	; 1
    115a:	41 e0       	ldi	r20, 0x01	; 1
    115c:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <dio_set_pin>


lcd_send_cmd(return_home);
    1160:	82 e0       	ldi	r24, 0x02	; 2
    1162:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <lcd_send_cmd>
    1166:	8f e1       	ldi	r24, 0x1F	; 31
    1168:	9e e4       	ldi	r25, 0x4E	; 78
    116a:	01 97       	sbiw	r24, 0x01	; 1
    116c:	f1 f7       	brne	.-4      	; 0x116a <lcd_init+0x46>
    116e:	00 c0       	rjmp	.+0      	; 0x1170 <lcd_init+0x4c>
    1170:	00 00       	nop

dm(10);
lcd_send_cmd(four_bits);
    1172:	88 e2       	ldi	r24, 0x28	; 40
    1174:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <lcd_send_cmd>
    1178:	8f ec       	ldi	r24, 0xCF	; 207
    117a:	97 e0       	ldi	r25, 0x07	; 7
    117c:	01 97       	sbiw	r24, 0x01	; 1
    117e:	f1 f7       	brne	.-4      	; 0x117c <lcd_init+0x58>
    1180:	00 c0       	rjmp	.+0      	; 0x1182 <lcd_init+0x5e>
    1182:	00 00       	nop
dm(1);

lcd_send_cmd(clr_screen);
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <lcd_send_cmd>
    118a:	8f e1       	ldi	r24, 0x1F	; 31
    118c:	9e e4       	ldi	r25, 0x4E	; 78
    118e:	01 97       	sbiw	r24, 0x01	; 1
    1190:	f1 f7       	brne	.-4      	; 0x118e <lcd_init+0x6a>
    1192:	00 c0       	rjmp	.+0      	; 0x1194 <lcd_init+0x70>
    1194:	00 00       	nop
dm(10);
lcd_send_cmd(entry_mode);
    1196:	86 e0       	ldi	r24, 0x06	; 6
    1198:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <lcd_send_cmd>
    119c:	8f ec       	ldi	r24, 0xCF	; 207
    119e:	97 e0       	ldi	r25, 0x07	; 7
    11a0:	01 97       	sbiw	r24, 0x01	; 1
    11a2:	f1 f7       	brne	.-4      	; 0x11a0 <lcd_init+0x7c>
    11a4:	00 c0       	rjmp	.+0      	; 0x11a6 <lcd_init+0x82>
    11a6:	00 00       	nop
dm(1);
lcd_send_cmd(cursor_on_disp_on);
    11a8:	8e e0       	ldi	r24, 0x0E	; 14
    11aa:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <lcd_send_cmd>
    11ae:	8f ec       	ldi	r24, 0xCF	; 207
    11b0:	97 e0       	ldi	r25, 0x07	; 7
    11b2:	01 97       	sbiw	r24, 0x01	; 1
    11b4:	f1 f7       	brne	.-4      	; 0x11b2 <lcd_init+0x8e>
    11b6:	00 c0       	rjmp	.+0      	; 0x11b8 <lcd_init+0x94>
    11b8:	00 00       	nop
dm(1);


#endif
}
    11ba:	08 95       	ret

000011bc <lcd_send_char>:
pulse();
dm(1);
#endif
}
void lcd_send_char(char data)
{
    11bc:	cf 93       	push	r28
    11be:	c8 2f       	mov	r28, r24
	dio_write_port(st1,data);
	dio_write_pin(st2,rs,1);
	pulse();
	dm(1);
#elif defined four_bits_mode
dio_write_lo_level(st1,data>>4);
    11c0:	68 2f       	mov	r22, r24
    11c2:	62 95       	swap	r22
    11c4:	6f 70       	andi	r22, 0x0F	; 15
    11c6:	81 e4       	ldi	r24, 0x41	; 65
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	70 e0       	ldi	r23, 0x00	; 0
    11cc:	0e 94 d0 06 	call	0xda0	; 0xda0 <dio_write_lo_level>
dio_write_pin(st2,rs,1);
    11d0:	82 e4       	ldi	r24, 0x42	; 66
    11d2:	61 e0       	ldi	r22, 0x01	; 1
    11d4:	41 e0       	ldi	r20, 0x01	; 1
    11d6:	0e 94 85 04 	call	0x90a	; 0x90a <dio_write_pin>
pulse();
    11da:	0e 94 54 08 	call	0x10a8	; 0x10a8 <pulse>
    11de:	8f ec       	ldi	r24, 0xCF	; 207
    11e0:	97 e0       	ldi	r25, 0x07	; 7
    11e2:	01 97       	sbiw	r24, 0x01	; 1
    11e4:	f1 f7       	brne	.-4      	; 0x11e2 <lcd_send_char+0x26>
    11e6:	00 c0       	rjmp	.+0      	; 0x11e8 <lcd_send_char+0x2c>
    11e8:	00 00       	nop
dm(1);
dio_write_lo_level(st1,data);
    11ea:	81 e4       	ldi	r24, 0x41	; 65
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	6c 2f       	mov	r22, r28
    11f0:	70 e0       	ldi	r23, 0x00	; 0
    11f2:	0e 94 d0 06 	call	0xda0	; 0xda0 <dio_write_lo_level>
pulse();
    11f6:	0e 94 54 08 	call	0x10a8	; 0x10a8 <pulse>
    11fa:	8f ec       	ldi	r24, 0xCF	; 207
    11fc:	97 e0       	ldi	r25, 0x07	; 7
    11fe:	01 97       	sbiw	r24, 0x01	; 1
    1200:	f1 f7       	brne	.-4      	; 0x11fe <lcd_send_char+0x42>
    1202:	00 c0       	rjmp	.+0      	; 0x1204 <lcd_send_char+0x48>
    1204:	00 00       	nop
dm(1);
#endif
}
    1206:	cf 91       	pop	r28
    1208:	08 95       	ret

0000120a <lcd_send_string>:
void lcd_send_string(char * data)
{
    120a:	cf 93       	push	r28
    120c:	df 93       	push	r29
    120e:	ec 01       	movw	r28, r24
	while (*data!='\0')
    1210:	88 81       	ld	r24, Y
    1212:	88 23       	and	r24, r24
    1214:	31 f0       	breq	.+12     	; 0x1222 <lcd_send_string+0x18>
dio_write_lo_level(st1,data);
pulse();
dm(1);
#endif
}
void lcd_send_string(char * data)
    1216:	21 96       	adiw	r28, 0x01	; 1
{
	while (*data!='\0')
	{
	lcd_send_char(*data);
    1218:	0e 94 de 08 	call	0x11bc	; 0x11bc <lcd_send_char>
dm(1);
#endif
}
void lcd_send_string(char * data)
{
	while (*data!='\0')
    121c:	89 91       	ld	r24, Y+
    121e:	88 23       	and	r24, r24
    1220:	d9 f7       	brne	.-10     	; 0x1218 <lcd_send_string+0xe>
    1222:	8f ec       	ldi	r24, 0xCF	; 207
    1224:	97 e0       	ldi	r25, 0x07	; 7
    1226:	01 97       	sbiw	r24, 0x01	; 1
    1228:	f1 f7       	brne	.-4      	; 0x1226 <lcd_send_string+0x1c>
    122a:	00 c0       	rjmp	.+0      	; 0x122c <lcd_send_string+0x22>
    122c:	00 00       	nop

	
	}
		dm(1);
		
}
    122e:	df 91       	pop	r29
    1230:	cf 91       	pop	r28
    1232:	08 95       	ret

00001234 <lcd_clrscrean>:
void lcd_clrscrean(void)
{
	lcd_send_cmd(clr_screen);
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <lcd_send_cmd>
    123a:	8f e1       	ldi	r24, 0x1F	; 31
    123c:	9e e4       	ldi	r25, 0x4E	; 78
    123e:	01 97       	sbiw	r24, 0x01	; 1
    1240:	f1 f7       	brne	.-4      	; 0x123e <lcd_clrscrean+0xa>
    1242:	00 c0       	rjmp	.+0      	; 0x1244 <lcd_clrscrean+0x10>
    1244:	00 00       	nop
	dm(10);
}
    1246:	08 95       	ret

00001248 <lcd_move_cursor>:
void lcd_move_cursor(char row,char coloumn)
{
	char data;
	if (row>2||row<1||coloumn<1||coloumn>16)
    1248:	28 2f       	mov	r18, r24
    124a:	21 50       	subi	r18, 0x01	; 1
    124c:	22 30       	cpi	r18, 0x02	; 2
    124e:	70 f4       	brcc	.+28     	; 0x126c <lcd_move_cursor+0x24>
    1250:	66 23       	and	r22, r22
    1252:	71 f0       	breq	.+28     	; 0x1270 <lcd_move_cursor+0x28>
    1254:	61 31       	cpi	r22, 0x11	; 17
    1256:	70 f4       	brcc	.+28     	; 0x1274 <lcd_move_cursor+0x2c>
	{
	data =0x80;
	}
else if (row==1)
    1258:	81 30       	cpi	r24, 0x01	; 1
    125a:	19 f4       	brne	.+6      	; 0x1262 <lcd_move_cursor+0x1a>
{
	data=0x80+coloumn-1;
    125c:	96 2f       	mov	r25, r22
    125e:	91 58       	subi	r25, 0x81	; 129
    1260:	0a c0       	rjmp	.+20     	; 0x1276 <lcd_move_cursor+0x2e>
}
else if (row==2)
    1262:	82 30       	cpi	r24, 0x02	; 2
    1264:	41 f4       	brne	.+16     	; 0x1276 <lcd_move_cursor+0x2e>
{
	data=0xc0+coloumn-1;
    1266:	96 2f       	mov	r25, r22
    1268:	91 54       	subi	r25, 0x41	; 65
    126a:	05 c0       	rjmp	.+10     	; 0x1276 <lcd_move_cursor+0x2e>
void lcd_move_cursor(char row,char coloumn)
{
	char data;
	if (row>2||row<1||coloumn<1||coloumn>16)
	{
	data =0x80;
    126c:	90 e8       	ldi	r25, 0x80	; 128
    126e:	03 c0       	rjmp	.+6      	; 0x1276 <lcd_move_cursor+0x2e>
    1270:	90 e8       	ldi	r25, 0x80	; 128
    1272:	01 c0       	rjmp	.+2      	; 0x1276 <lcd_move_cursor+0x2e>
    1274:	90 e8       	ldi	r25, 0x80	; 128
}
else if (row==2)
{
	data=0xc0+coloumn-1;
}
lcd_send_cmd(data);
    1276:	89 2f       	mov	r24, r25
    1278:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <lcd_send_cmd>
    127c:	8f ec       	ldi	r24, 0xCF	; 207
    127e:	97 e0       	ldi	r25, 0x07	; 7
    1280:	01 97       	sbiw	r24, 0x01	; 1
    1282:	f1 f7       	brne	.-4      	; 0x1280 <lcd_move_cursor+0x38>
    1284:	00 c0       	rjmp	.+0      	; 0x1286 <lcd_move_cursor+0x3e>
    1286:	00 00       	nop
dm(1);
}
    1288:	08 95       	ret

0000128a <__divsf3>:
    128a:	0c d0       	rcall	.+24     	; 0x12a4 <__divsf3x>
    128c:	eb c0       	rjmp	.+470    	; 0x1464 <__fp_round>
    128e:	e3 d0       	rcall	.+454    	; 0x1456 <__fp_pscB>
    1290:	40 f0       	brcs	.+16     	; 0x12a2 <__divsf3+0x18>
    1292:	da d0       	rcall	.+436    	; 0x1448 <__fp_pscA>
    1294:	30 f0       	brcs	.+12     	; 0x12a2 <__divsf3+0x18>
    1296:	21 f4       	brne	.+8      	; 0x12a0 <__divsf3+0x16>
    1298:	5f 3f       	cpi	r21, 0xFF	; 255
    129a:	19 f0       	breq	.+6      	; 0x12a2 <__divsf3+0x18>
    129c:	cc c0       	rjmp	.+408    	; 0x1436 <__fp_inf>
    129e:	51 11       	cpse	r21, r1
    12a0:	15 c1       	rjmp	.+554    	; 0x14cc <__fp_szero>
    12a2:	cf c0       	rjmp	.+414    	; 0x1442 <__fp_nan>

000012a4 <__divsf3x>:
    12a4:	f0 d0       	rcall	.+480    	; 0x1486 <__fp_split3>
    12a6:	98 f3       	brcs	.-26     	; 0x128e <__divsf3+0x4>

000012a8 <__divsf3_pse>:
    12a8:	99 23       	and	r25, r25
    12aa:	c9 f3       	breq	.-14     	; 0x129e <__divsf3+0x14>
    12ac:	55 23       	and	r21, r21
    12ae:	b1 f3       	breq	.-20     	; 0x129c <__divsf3+0x12>
    12b0:	95 1b       	sub	r25, r21
    12b2:	55 0b       	sbc	r21, r21
    12b4:	bb 27       	eor	r27, r27
    12b6:	aa 27       	eor	r26, r26
    12b8:	62 17       	cp	r22, r18
    12ba:	73 07       	cpc	r23, r19
    12bc:	84 07       	cpc	r24, r20
    12be:	38 f0       	brcs	.+14     	; 0x12ce <__divsf3_pse+0x26>
    12c0:	9f 5f       	subi	r25, 0xFF	; 255
    12c2:	5f 4f       	sbci	r21, 0xFF	; 255
    12c4:	22 0f       	add	r18, r18
    12c6:	33 1f       	adc	r19, r19
    12c8:	44 1f       	adc	r20, r20
    12ca:	aa 1f       	adc	r26, r26
    12cc:	a9 f3       	breq	.-22     	; 0x12b8 <__divsf3_pse+0x10>
    12ce:	33 d0       	rcall	.+102    	; 0x1336 <__divsf3_pse+0x8e>
    12d0:	0e 2e       	mov	r0, r30
    12d2:	3a f0       	brmi	.+14     	; 0x12e2 <__divsf3_pse+0x3a>
    12d4:	e0 e8       	ldi	r30, 0x80	; 128
    12d6:	30 d0       	rcall	.+96     	; 0x1338 <__divsf3_pse+0x90>
    12d8:	91 50       	subi	r25, 0x01	; 1
    12da:	50 40       	sbci	r21, 0x00	; 0
    12dc:	e6 95       	lsr	r30
    12de:	00 1c       	adc	r0, r0
    12e0:	ca f7       	brpl	.-14     	; 0x12d4 <__divsf3_pse+0x2c>
    12e2:	29 d0       	rcall	.+82     	; 0x1336 <__divsf3_pse+0x8e>
    12e4:	fe 2f       	mov	r31, r30
    12e6:	27 d0       	rcall	.+78     	; 0x1336 <__divsf3_pse+0x8e>
    12e8:	66 0f       	add	r22, r22
    12ea:	77 1f       	adc	r23, r23
    12ec:	88 1f       	adc	r24, r24
    12ee:	bb 1f       	adc	r27, r27
    12f0:	26 17       	cp	r18, r22
    12f2:	37 07       	cpc	r19, r23
    12f4:	48 07       	cpc	r20, r24
    12f6:	ab 07       	cpc	r26, r27
    12f8:	b0 e8       	ldi	r27, 0x80	; 128
    12fa:	09 f0       	breq	.+2      	; 0x12fe <__divsf3_pse+0x56>
    12fc:	bb 0b       	sbc	r27, r27
    12fe:	80 2d       	mov	r24, r0
    1300:	bf 01       	movw	r22, r30
    1302:	ff 27       	eor	r31, r31
    1304:	93 58       	subi	r25, 0x83	; 131
    1306:	5f 4f       	sbci	r21, 0xFF	; 255
    1308:	2a f0       	brmi	.+10     	; 0x1314 <__divsf3_pse+0x6c>
    130a:	9e 3f       	cpi	r25, 0xFE	; 254
    130c:	51 05       	cpc	r21, r1
    130e:	68 f0       	brcs	.+26     	; 0x132a <__divsf3_pse+0x82>
    1310:	92 c0       	rjmp	.+292    	; 0x1436 <__fp_inf>
    1312:	dc c0       	rjmp	.+440    	; 0x14cc <__fp_szero>
    1314:	5f 3f       	cpi	r21, 0xFF	; 255
    1316:	ec f3       	brlt	.-6      	; 0x1312 <__divsf3_pse+0x6a>
    1318:	98 3e       	cpi	r25, 0xE8	; 232
    131a:	dc f3       	brlt	.-10     	; 0x1312 <__divsf3_pse+0x6a>
    131c:	86 95       	lsr	r24
    131e:	77 95       	ror	r23
    1320:	67 95       	ror	r22
    1322:	b7 95       	ror	r27
    1324:	f7 95       	ror	r31
    1326:	9f 5f       	subi	r25, 0xFF	; 255
    1328:	c9 f7       	brne	.-14     	; 0x131c <__divsf3_pse+0x74>
    132a:	88 0f       	add	r24, r24
    132c:	91 1d       	adc	r25, r1
    132e:	96 95       	lsr	r25
    1330:	87 95       	ror	r24
    1332:	97 f9       	bld	r25, 7
    1334:	08 95       	ret
    1336:	e1 e0       	ldi	r30, 0x01	; 1
    1338:	66 0f       	add	r22, r22
    133a:	77 1f       	adc	r23, r23
    133c:	88 1f       	adc	r24, r24
    133e:	bb 1f       	adc	r27, r27
    1340:	62 17       	cp	r22, r18
    1342:	73 07       	cpc	r23, r19
    1344:	84 07       	cpc	r24, r20
    1346:	ba 07       	cpc	r27, r26
    1348:	20 f0       	brcs	.+8      	; 0x1352 <__divsf3_pse+0xaa>
    134a:	62 1b       	sub	r22, r18
    134c:	73 0b       	sbc	r23, r19
    134e:	84 0b       	sbc	r24, r20
    1350:	ba 0b       	sbc	r27, r26
    1352:	ee 1f       	adc	r30, r30
    1354:	88 f7       	brcc	.-30     	; 0x1338 <__divsf3_pse+0x90>
    1356:	e0 95       	com	r30
    1358:	08 95       	ret

0000135a <__fixsfsi>:
    135a:	04 d0       	rcall	.+8      	; 0x1364 <__fixunssfsi>
    135c:	68 94       	set
    135e:	b1 11       	cpse	r27, r1
    1360:	b5 c0       	rjmp	.+362    	; 0x14cc <__fp_szero>
    1362:	08 95       	ret

00001364 <__fixunssfsi>:
    1364:	98 d0       	rcall	.+304    	; 0x1496 <__fp_splitA>
    1366:	88 f0       	brcs	.+34     	; 0x138a <__fixunssfsi+0x26>
    1368:	9f 57       	subi	r25, 0x7F	; 127
    136a:	90 f0       	brcs	.+36     	; 0x1390 <__fixunssfsi+0x2c>
    136c:	b9 2f       	mov	r27, r25
    136e:	99 27       	eor	r25, r25
    1370:	b7 51       	subi	r27, 0x17	; 23
    1372:	a0 f0       	brcs	.+40     	; 0x139c <__fixunssfsi+0x38>
    1374:	d1 f0       	breq	.+52     	; 0x13aa <__fixunssfsi+0x46>
    1376:	66 0f       	add	r22, r22
    1378:	77 1f       	adc	r23, r23
    137a:	88 1f       	adc	r24, r24
    137c:	99 1f       	adc	r25, r25
    137e:	1a f0       	brmi	.+6      	; 0x1386 <__fixunssfsi+0x22>
    1380:	ba 95       	dec	r27
    1382:	c9 f7       	brne	.-14     	; 0x1376 <__fixunssfsi+0x12>
    1384:	12 c0       	rjmp	.+36     	; 0x13aa <__fixunssfsi+0x46>
    1386:	b1 30       	cpi	r27, 0x01	; 1
    1388:	81 f0       	breq	.+32     	; 0x13aa <__fixunssfsi+0x46>
    138a:	9f d0       	rcall	.+318    	; 0x14ca <__fp_zero>
    138c:	b1 e0       	ldi	r27, 0x01	; 1
    138e:	08 95       	ret
    1390:	9c c0       	rjmp	.+312    	; 0x14ca <__fp_zero>
    1392:	67 2f       	mov	r22, r23
    1394:	78 2f       	mov	r23, r24
    1396:	88 27       	eor	r24, r24
    1398:	b8 5f       	subi	r27, 0xF8	; 248
    139a:	39 f0       	breq	.+14     	; 0x13aa <__fixunssfsi+0x46>
    139c:	b9 3f       	cpi	r27, 0xF9	; 249
    139e:	cc f3       	brlt	.-14     	; 0x1392 <__fixunssfsi+0x2e>
    13a0:	86 95       	lsr	r24
    13a2:	77 95       	ror	r23
    13a4:	67 95       	ror	r22
    13a6:	b3 95       	inc	r27
    13a8:	d9 f7       	brne	.-10     	; 0x13a0 <__fixunssfsi+0x3c>
    13aa:	3e f4       	brtc	.+14     	; 0x13ba <__fixunssfsi+0x56>
    13ac:	90 95       	com	r25
    13ae:	80 95       	com	r24
    13b0:	70 95       	com	r23
    13b2:	61 95       	neg	r22
    13b4:	7f 4f       	sbci	r23, 0xFF	; 255
    13b6:	8f 4f       	sbci	r24, 0xFF	; 255
    13b8:	9f 4f       	sbci	r25, 0xFF	; 255
    13ba:	08 95       	ret

000013bc <__floatunsisf>:
    13bc:	e8 94       	clt
    13be:	09 c0       	rjmp	.+18     	; 0x13d2 <__floatsisf+0x12>

000013c0 <__floatsisf>:
    13c0:	97 fb       	bst	r25, 7
    13c2:	3e f4       	brtc	.+14     	; 0x13d2 <__floatsisf+0x12>
    13c4:	90 95       	com	r25
    13c6:	80 95       	com	r24
    13c8:	70 95       	com	r23
    13ca:	61 95       	neg	r22
    13cc:	7f 4f       	sbci	r23, 0xFF	; 255
    13ce:	8f 4f       	sbci	r24, 0xFF	; 255
    13d0:	9f 4f       	sbci	r25, 0xFF	; 255
    13d2:	99 23       	and	r25, r25
    13d4:	a9 f0       	breq	.+42     	; 0x1400 <__floatsisf+0x40>
    13d6:	f9 2f       	mov	r31, r25
    13d8:	96 e9       	ldi	r25, 0x96	; 150
    13da:	bb 27       	eor	r27, r27
    13dc:	93 95       	inc	r25
    13de:	f6 95       	lsr	r31
    13e0:	87 95       	ror	r24
    13e2:	77 95       	ror	r23
    13e4:	67 95       	ror	r22
    13e6:	b7 95       	ror	r27
    13e8:	f1 11       	cpse	r31, r1
    13ea:	f8 cf       	rjmp	.-16     	; 0x13dc <__floatsisf+0x1c>
    13ec:	fa f4       	brpl	.+62     	; 0x142c <__floatsisf+0x6c>
    13ee:	bb 0f       	add	r27, r27
    13f0:	11 f4       	brne	.+4      	; 0x13f6 <__floatsisf+0x36>
    13f2:	60 ff       	sbrs	r22, 0
    13f4:	1b c0       	rjmp	.+54     	; 0x142c <__floatsisf+0x6c>
    13f6:	6f 5f       	subi	r22, 0xFF	; 255
    13f8:	7f 4f       	sbci	r23, 0xFF	; 255
    13fa:	8f 4f       	sbci	r24, 0xFF	; 255
    13fc:	9f 4f       	sbci	r25, 0xFF	; 255
    13fe:	16 c0       	rjmp	.+44     	; 0x142c <__floatsisf+0x6c>
    1400:	88 23       	and	r24, r24
    1402:	11 f0       	breq	.+4      	; 0x1408 <__floatsisf+0x48>
    1404:	96 e9       	ldi	r25, 0x96	; 150
    1406:	11 c0       	rjmp	.+34     	; 0x142a <__floatsisf+0x6a>
    1408:	77 23       	and	r23, r23
    140a:	21 f0       	breq	.+8      	; 0x1414 <__floatsisf+0x54>
    140c:	9e e8       	ldi	r25, 0x8E	; 142
    140e:	87 2f       	mov	r24, r23
    1410:	76 2f       	mov	r23, r22
    1412:	05 c0       	rjmp	.+10     	; 0x141e <__floatsisf+0x5e>
    1414:	66 23       	and	r22, r22
    1416:	71 f0       	breq	.+28     	; 0x1434 <__floatsisf+0x74>
    1418:	96 e8       	ldi	r25, 0x86	; 134
    141a:	86 2f       	mov	r24, r22
    141c:	70 e0       	ldi	r23, 0x00	; 0
    141e:	60 e0       	ldi	r22, 0x00	; 0
    1420:	2a f0       	brmi	.+10     	; 0x142c <__floatsisf+0x6c>
    1422:	9a 95       	dec	r25
    1424:	66 0f       	add	r22, r22
    1426:	77 1f       	adc	r23, r23
    1428:	88 1f       	adc	r24, r24
    142a:	da f7       	brpl	.-10     	; 0x1422 <__floatsisf+0x62>
    142c:	88 0f       	add	r24, r24
    142e:	96 95       	lsr	r25
    1430:	87 95       	ror	r24
    1432:	97 f9       	bld	r25, 7
    1434:	08 95       	ret

00001436 <__fp_inf>:
    1436:	97 f9       	bld	r25, 7
    1438:	9f 67       	ori	r25, 0x7F	; 127
    143a:	80 e8       	ldi	r24, 0x80	; 128
    143c:	70 e0       	ldi	r23, 0x00	; 0
    143e:	60 e0       	ldi	r22, 0x00	; 0
    1440:	08 95       	ret

00001442 <__fp_nan>:
    1442:	9f ef       	ldi	r25, 0xFF	; 255
    1444:	80 ec       	ldi	r24, 0xC0	; 192
    1446:	08 95       	ret

00001448 <__fp_pscA>:
    1448:	00 24       	eor	r0, r0
    144a:	0a 94       	dec	r0
    144c:	16 16       	cp	r1, r22
    144e:	17 06       	cpc	r1, r23
    1450:	18 06       	cpc	r1, r24
    1452:	09 06       	cpc	r0, r25
    1454:	08 95       	ret

00001456 <__fp_pscB>:
    1456:	00 24       	eor	r0, r0
    1458:	0a 94       	dec	r0
    145a:	12 16       	cp	r1, r18
    145c:	13 06       	cpc	r1, r19
    145e:	14 06       	cpc	r1, r20
    1460:	05 06       	cpc	r0, r21
    1462:	08 95       	ret

00001464 <__fp_round>:
    1464:	09 2e       	mov	r0, r25
    1466:	03 94       	inc	r0
    1468:	00 0c       	add	r0, r0
    146a:	11 f4       	brne	.+4      	; 0x1470 <__fp_round+0xc>
    146c:	88 23       	and	r24, r24
    146e:	52 f0       	brmi	.+20     	; 0x1484 <__fp_round+0x20>
    1470:	bb 0f       	add	r27, r27
    1472:	40 f4       	brcc	.+16     	; 0x1484 <__fp_round+0x20>
    1474:	bf 2b       	or	r27, r31
    1476:	11 f4       	brne	.+4      	; 0x147c <__fp_round+0x18>
    1478:	60 ff       	sbrs	r22, 0
    147a:	04 c0       	rjmp	.+8      	; 0x1484 <__fp_round+0x20>
    147c:	6f 5f       	subi	r22, 0xFF	; 255
    147e:	7f 4f       	sbci	r23, 0xFF	; 255
    1480:	8f 4f       	sbci	r24, 0xFF	; 255
    1482:	9f 4f       	sbci	r25, 0xFF	; 255
    1484:	08 95       	ret

00001486 <__fp_split3>:
    1486:	57 fd       	sbrc	r21, 7
    1488:	90 58       	subi	r25, 0x80	; 128
    148a:	44 0f       	add	r20, r20
    148c:	55 1f       	adc	r21, r21
    148e:	59 f0       	breq	.+22     	; 0x14a6 <__fp_splitA+0x10>
    1490:	5f 3f       	cpi	r21, 0xFF	; 255
    1492:	71 f0       	breq	.+28     	; 0x14b0 <__fp_splitA+0x1a>
    1494:	47 95       	ror	r20

00001496 <__fp_splitA>:
    1496:	88 0f       	add	r24, r24
    1498:	97 fb       	bst	r25, 7
    149a:	99 1f       	adc	r25, r25
    149c:	61 f0       	breq	.+24     	; 0x14b6 <__fp_splitA+0x20>
    149e:	9f 3f       	cpi	r25, 0xFF	; 255
    14a0:	79 f0       	breq	.+30     	; 0x14c0 <__fp_splitA+0x2a>
    14a2:	87 95       	ror	r24
    14a4:	08 95       	ret
    14a6:	12 16       	cp	r1, r18
    14a8:	13 06       	cpc	r1, r19
    14aa:	14 06       	cpc	r1, r20
    14ac:	55 1f       	adc	r21, r21
    14ae:	f2 cf       	rjmp	.-28     	; 0x1494 <__fp_split3+0xe>
    14b0:	46 95       	lsr	r20
    14b2:	f1 df       	rcall	.-30     	; 0x1496 <__fp_splitA>
    14b4:	08 c0       	rjmp	.+16     	; 0x14c6 <__fp_splitA+0x30>
    14b6:	16 16       	cp	r1, r22
    14b8:	17 06       	cpc	r1, r23
    14ba:	18 06       	cpc	r1, r24
    14bc:	99 1f       	adc	r25, r25
    14be:	f1 cf       	rjmp	.-30     	; 0x14a2 <__fp_splitA+0xc>
    14c0:	86 95       	lsr	r24
    14c2:	71 05       	cpc	r23, r1
    14c4:	61 05       	cpc	r22, r1
    14c6:	08 94       	sec
    14c8:	08 95       	ret

000014ca <__fp_zero>:
    14ca:	e8 94       	clt

000014cc <__fp_szero>:
    14cc:	bb 27       	eor	r27, r27
    14ce:	66 27       	eor	r22, r22
    14d0:	77 27       	eor	r23, r23
    14d2:	cb 01       	movw	r24, r22
    14d4:	97 f9       	bld	r25, 7
    14d6:	08 95       	ret

000014d8 <__mulsi3>:
    14d8:	62 9f       	mul	r22, r18
    14da:	d0 01       	movw	r26, r0
    14dc:	73 9f       	mul	r23, r19
    14de:	f0 01       	movw	r30, r0
    14e0:	82 9f       	mul	r24, r18
    14e2:	e0 0d       	add	r30, r0
    14e4:	f1 1d       	adc	r31, r1
    14e6:	64 9f       	mul	r22, r20
    14e8:	e0 0d       	add	r30, r0
    14ea:	f1 1d       	adc	r31, r1
    14ec:	92 9f       	mul	r25, r18
    14ee:	f0 0d       	add	r31, r0
    14f0:	83 9f       	mul	r24, r19
    14f2:	f0 0d       	add	r31, r0
    14f4:	74 9f       	mul	r23, r20
    14f6:	f0 0d       	add	r31, r0
    14f8:	65 9f       	mul	r22, r21
    14fa:	f0 0d       	add	r31, r0
    14fc:	99 27       	eor	r25, r25
    14fe:	72 9f       	mul	r23, r18
    1500:	b0 0d       	add	r27, r0
    1502:	e1 1d       	adc	r30, r1
    1504:	f9 1f       	adc	r31, r25
    1506:	63 9f       	mul	r22, r19
    1508:	b0 0d       	add	r27, r0
    150a:	e1 1d       	adc	r30, r1
    150c:	f9 1f       	adc	r31, r25
    150e:	bd 01       	movw	r22, r26
    1510:	cf 01       	movw	r24, r30
    1512:	11 24       	eor	r1, r1
    1514:	08 95       	ret

00001516 <__divmodhi4>:
    1516:	97 fb       	bst	r25, 7
    1518:	09 2e       	mov	r0, r25
    151a:	07 26       	eor	r0, r23
    151c:	0a d0       	rcall	.+20     	; 0x1532 <__divmodhi4_neg1>
    151e:	77 fd       	sbrc	r23, 7
    1520:	04 d0       	rcall	.+8      	; 0x152a <__divmodhi4_neg2>
    1522:	0c d0       	rcall	.+24     	; 0x153c <__udivmodhi4>
    1524:	06 d0       	rcall	.+12     	; 0x1532 <__divmodhi4_neg1>
    1526:	00 20       	and	r0, r0
    1528:	1a f4       	brpl	.+6      	; 0x1530 <__divmodhi4_exit>

0000152a <__divmodhi4_neg2>:
    152a:	70 95       	com	r23
    152c:	61 95       	neg	r22
    152e:	7f 4f       	sbci	r23, 0xFF	; 255

00001530 <__divmodhi4_exit>:
    1530:	08 95       	ret

00001532 <__divmodhi4_neg1>:
    1532:	f6 f7       	brtc	.-4      	; 0x1530 <__divmodhi4_exit>
    1534:	90 95       	com	r25
    1536:	81 95       	neg	r24
    1538:	9f 4f       	sbci	r25, 0xFF	; 255
    153a:	08 95       	ret

0000153c <__udivmodhi4>:
    153c:	aa 1b       	sub	r26, r26
    153e:	bb 1b       	sub	r27, r27
    1540:	51 e1       	ldi	r21, 0x11	; 17
    1542:	07 c0       	rjmp	.+14     	; 0x1552 <__udivmodhi4_ep>

00001544 <__udivmodhi4_loop>:
    1544:	aa 1f       	adc	r26, r26
    1546:	bb 1f       	adc	r27, r27
    1548:	a6 17       	cp	r26, r22
    154a:	b7 07       	cpc	r27, r23
    154c:	10 f0       	brcs	.+4      	; 0x1552 <__udivmodhi4_ep>
    154e:	a6 1b       	sub	r26, r22
    1550:	b7 0b       	sbc	r27, r23

00001552 <__udivmodhi4_ep>:
    1552:	88 1f       	adc	r24, r24
    1554:	99 1f       	adc	r25, r25
    1556:	5a 95       	dec	r21
    1558:	a9 f7       	brne	.-22     	; 0x1544 <__udivmodhi4_loop>
    155a:	80 95       	com	r24
    155c:	90 95       	com	r25
    155e:	bc 01       	movw	r22, r24
    1560:	cd 01       	movw	r24, r26
    1562:	08 95       	ret

00001564 <_exit>:
    1564:	f8 94       	cli

00001566 <__stop_program>:
    1566:	ff cf       	rjmp	.-2      	; 0x1566 <__stop_program>
